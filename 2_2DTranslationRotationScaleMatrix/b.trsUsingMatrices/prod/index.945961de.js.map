{"mappings":"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","sources":["positions-colors/F-2D.js","node_modules/gl-matrix/esm/common.js","node_modules/web-gl-helpers/dist/src/AttributeClass.js","node_modules/web-gl-helpers/dist/src/UniformClass.js","node_modules/gl-matrix/esm/mat3.js","2_2Dtranslationrotationscalematrix/b.trsusingmatrices/main.js","node_modules/web-gl-helpers/dist/src/HelperFunctions.js"],"sourcesContent":["/**\r\n * Created by Rick on 2021-12-24.\r\n */\r\n'use strict';\r\n\r\n// in pixel values\r\nconst F_2D_positions_list = [\r\n  // left column\r\n  0, 0,\r\n  30, 0,\r\n  0, 150,\r\n  0, 150,\r\n  30, 0,\r\n  30, 150,\r\n\r\n  // top rung\r\n  30, 0,\r\n  100, 0,\r\n  30, 30,\r\n  30, 30,\r\n  100, 0,\r\n  100, 30,\r\n\r\n  // middle rung\r\n  30, 60,\r\n  67, 60,\r\n  30, 90,\r\n  30, 90,\r\n  67, 60,\r\n  67, 90,\r\n]\r\nexport {\r\n  F_2D_positions_list\r\n}","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * AttributeClass provides functions for working with a WebGLProgram's attribute variable.\r\n *   The class establishes a data buffer for sending vertex attributes, such as vertex coordinates,\r\n *   texture coordinate data, or vertex color data through the graphics hardware pipeline.\r\n *   See [WebGL Fundamentals](https://webgl2fundamentals.org/webgl/lessons/webgl-fundamentals.html) for\r\n *   an explanation on data buffers.\r\n *\r\n */\r\nexport default class AttributeClass {\r\n  /**\r\n   * Create an AttributeClass instance\r\n   * @param {WebGLRenderingContext} gl The WebGL context\r\n   * @param {number} type  Specifying the [data type]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer}\r\n   *   of each component in the array.\r\n   * @param {WebGLProgram} program The WebGL program.\r\n   * @param {string} name The name of the attribute variable.\r\n   */\r\n  constructor(gl, type, program, name) {\r\n    this.gl = gl;\r\n    this.type = type;\r\n    // Look up where the attribute needs to go\r\n    this.attributeLocation = this.gl.getAttribLocation(program, name);\r\n    this.buffer = this.gl.createBuffer();\r\n  }\r\n\r\n  /**\r\n   * Describes how the attribute is read from the buffer pipeline.\r\n   * @param {number} size  The number of components per vertex attribute. Must be 1, 2, 3, or 4.\r\n   * @param {boolean} normalize Specifying whether integer data values should be normalized.\r\n   * @param {number} stride Specifying the offset in bytes between the beginning of consecutive vertex attributes.\r\n   * @param {number} offset Specifying an offset in bytes of the first component in the vertex attribute array.\r\n   */\r\n  bufferFormat(size, normalize, stride, offset) {\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Tell the attribute how to get data out of the internal ARRAY_BUFFER\r\n    this.gl.vertexAttribPointer(\r\n      this.attributeLocation,\r\n      size,\r\n      this.type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    this.gl.enableVertexAttribArray(this.attributeLocation);\r\n  }\r\n\r\n  /**\r\n   * Initializes and creates the buffer object's data store.\r\n   * @param {number[]} attribute_list Array containing vertex attributes, such as vertex coordinates, texture coordinate data, or vertex color data.\r\n   * @param {number} usage Specifies the intended [usage pattern]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData} of the data store for optimization purposes.\r\n   */\r\n  setData(attribute_list, usage){\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Set geometry\r\n    switch(this.type){\r\n      case this.gl.FLOAT:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Float32Array(attribute_list),\r\n          usage\r\n        );\r\n      break;\r\n      case this.gl.UNSIGNED_BYTE:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Uint8Array(attribute_list),\r\n          usage\r\n        );\r\n        break;\r\n    }\r\n  }\r\n}","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * UniformClass creates and sets various types\r\n *   of [uniform variables]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform}\r\n *   defined in shader code.\r\n */\r\nexport default class UniformClass {\r\n  /**\r\n   * Create a UninformClass instance\r\n   * @param {WebGLRenderingContext} gl The WebGL context.\r\n   * @param {WebGLProgram} program The WebGL program.\r\n   * @param {string} name The name of the uniform variable.\r\n   * @param {string} type The type of uniform variable.\r\n   */\r\n  constructor(gl, program, name, type) {\r\n    this.gl = gl;\r\n    this.type = type;\r\n    // Look up where the uniform needs to go\r\n    this.uniformLocation = gl.getUniformLocation(program, name);\r\n  }\r\n\r\n  /**\r\n   * Set the value of the uniform variable.\r\n   * @param {number[]} args Array of values for the uniform variable.\r\n   *   The number of array elements submitted depends on the type of\r\n   *   variable being set.\r\n   */\r\n  setData(...args){\r\n    switch (this.type) {\r\n      case 'uniform1f':\r\n        this.gl.uniform1f(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform2f':\r\n        this.gl.uniform2f(this.uniformLocation, args[0], args[1]);\r\n        break;\r\n      case 'uniform4f':\r\n        this.gl.uniform4f(this.uniformLocation, args[0], args[1], args[2], args[3]);\r\n        break;\r\n      case 'uniform2fv':\r\n        this.gl.uniform2fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform3fv':\r\n        this.gl.uniform3fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform4fv':\r\n        this.gl.uniform4fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniformMatrix3fv':\r\n        this.gl.uniformMatrix3fv(this.uniformLocation,false,args[0]);\r\n        break;\r\n      case 'uniformMatrix4fv':\r\n        this.gl.uniformMatrix4fv(this.uniformLocation,false,args[0]);\r\n        break;\r\n      default:\r\n        throw new Error(`UniformClass: function ${this.type} has not been implemented.`);\r\n    }\r\n  }\r\n}","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\nimport {F_2D_positions_list} from '../../positions-colors/F-2D.js';\r\nimport {vertex_shader, fragment_shader} from \"./shaders.js\";\r\nimport {AttributeClass} from \"web-gl-helpers\";\r\nimport {UniformClass} from \"web-gl-helpers\";\r\nimport {resizeCanvasToDisplaySize} from \"web-gl-helpers\"\r\nimport {createShader} from \"web-gl-helpers\";\r\nimport {createGLcontext} from \"web-gl-helpers\";\r\nimport {createProgram} from \"web-gl-helpers\";\r\nimport {initializeContext} from \"web-gl-helpers\";\r\n\r\nimport {toRadian} from 'gl-matrix/esm/common';\r\nimport {\r\n  create as m3_create,\r\n  fromRotation as m3_fromRotation,\r\n  fromScaling as m3_fromScaling,\r\n  fromTranslation as m3_fromTranslation,\r\n  multiply as m3_multiply\r\n} from 'gl-matrix/esm/mat3';\r\n\r\ntry {\r\n  let doCenter = false;\r\n  let do5 = false;\r\n  const context = createGLcontext('my_canvas');\r\n  const gl = context.gl;\r\n  const canvas = context.canvas;\r\n\r\n  // Check canvas width and height\r\n  resizeCanvasToDisplaySize(canvas);\r\n\r\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n  // Create shader objects\r\n  const vShader = createShader(gl, gl.VERTEX_SHADER, vertex_shader);\r\n  const fShader = createShader(gl, gl.FRAGMENT_SHADER, fragment_shader);\r\n\r\n  // Create a WebGLProgram\r\n  const program = createProgram(gl, vShader, fShader);\r\n  // Tell context to use our program (a pair of shaders)\r\n  gl.useProgram(program);\r\n\r\n  // Create the attribute position data (a_position)\r\n  // Set up attribute for 'a_position'\r\n  const type = gl.FLOAT; // the data is 32bit floats\r\n  const positionAttrib = new AttributeClass(gl, type, program,'a_position_v2');\r\n  positionAttrib.setData(F_2D_positions_list, gl.STATIC_DRAW);\r\n\r\n  // Associate shader attributes with corresponding data buffers\r\n  const vao = gl.createVertexArray();\r\n  // Make vao the one we're currently working with\r\n  gl.bindVertexArray(vao);\r\n\r\n  // Specify how to pull the data out\r\n  {\r\n    const size = 2; // 2 components per iteration\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0; // 0 = move forward size * sizeof(type) each\r\n    //  iteration to get the next position\r\n    const offset = 0; // start at the beginning of the buffer\r\n    positionAttrib.bufferFormat(size, normalize, stride, offset);\r\n  }\r\n\r\n\r\n  // Set up uniforms\r\n  const resolutionUniform = new UniformClass(gl, program, 'u_resolution_v2', 'uniform2f');\r\n  resolutionUniform.setData(gl.canvas.width, gl.canvas.height);\r\n\r\n  const colorUniform = new UniformClass(gl, program, 'u_color_v4', 'uniform4f');\r\n  colorUniform.setData(Math.random(), Math.random(), Math.random(), 1);\r\n\r\n  const transformUniform = new UniformClass(gl, program, 'u_transform_m3', 'uniformMatrix3fv')\r\n\r\n  const primitiveType = gl.TRIANGLES;\r\n  const prim_offset = 0;\r\n  const triangle_count = 18;\r\n\r\n  // define the initial values for the parameters\r\n  let translation = [0, 0];\r\n  let rotation  = 0;\r\n  let scale = [1,1];\r\n\r\n  function getTranslationMatrix(translate){\r\n    const translate_m3 = m3_create();\r\n    m3_fromTranslation(translate_m3, translate);\r\n    return translate_m3\r\n  }\r\n\r\n  function getRotationMatrix(rotate_deg){\r\n    const rotate_m3 = m3_create();\r\n    m3_fromRotation(rotate_m3, toRadian(rotate_deg));\r\n    return rotate_m3;\r\n  }\r\n\r\n  function getScaleMatrix(scale){\r\n    const scale_m3 = m3_create();\r\n    m3_fromScaling(scale_m3, scale);\r\n    return scale_m3;\r\n  }\r\n\r\n  // define a function for drawing the scene\r\n  function drawScene(){\r\n    initializeContext(gl);\r\n\r\n    const translate_m3 = getTranslationMatrix(translation);\r\n    const rotate_m3 = getRotationMatrix(rotation);\r\n    const scale_m3 = getScaleMatrix(scale);\r\n\r\n    // Create transform_m3\r\n    const transform_m3 = m3_create();\r\n    if(doCenter) {\r\n      const moveOrigin_m3 = getTranslationMatrix([-50, -75]);\r\n      m3_multiply(transform_m3, translate_m3, rotate_m3);\r\n      m3_multiply(transform_m3, transform_m3, scale_m3);\r\n      m3_multiply(transform_m3, transform_m3, moveOrigin_m3);\r\n      // Set the new transform and draw the scene\r\n      transformUniform.setData(transform_m3);\r\n      gl.drawArrays(primitiveType, prim_offset, triangle_count);\r\n    }else if(do5){\r\n      for(let i=0; i < 5; i++){\r\n        m3_multiply(transform_m3, transform_m3, translate_m3);\r\n        m3_multiply(transform_m3, transform_m3, rotate_m3);\r\n        m3_multiply(transform_m3, transform_m3, scale_m3);\r\n        transformUniform.setData(transform_m3);\r\n        gl.drawArrays(primitiveType, prim_offset, triangle_count);\r\n      }\r\n    }else {\r\n      m3_multiply(transform_m3, translate_m3, rotate_m3);\r\n      m3_multiply(transform_m3, transform_m3, scale_m3);\r\n      // Set the new transform and draw the scene\r\n      transformUniform.setData(transform_m3);\r\n      gl.drawArrays(primitiveType, prim_offset, triangle_count);\r\n    }\r\n  }\r\n\r\n  // update functions called by user interface updates to parameters\r\n  function updateTranslation(index, value){\r\n    translation[index] = value;\r\n    drawScene();\r\n  }\r\n\r\n  function updateRotation(value){\r\n    rotation = value;\r\n    drawScene();\r\n  }\r\n\r\n  function updateScale(index, value){\r\n    scale[index] = value;\r\n    drawScene();\r\n  }\r\n\r\n  // set up the user interface for changes to the parameters\r\n  // define x, y translation slider attributes and event callbacks\r\n  const x_translate_slider = document.getElementById('x_translate');\r\n  const y_translate_slider = document.getElementById('y_translate');\r\n  const x_translate_output = document.getElementById('x_translate_output');\r\n  const y_translate_output = document.getElementById('y_translate_output');\r\n  x_translate_slider.step = y_translate_slider.step = 2;\r\n  x_translate_slider.min = y_translate_slider.min = 0;\r\n  x_translate_slider.max = y_translate_slider.max = 600;\r\n  x_translate_slider.value = x_translate_output.textContent = translation[0];\r\n  y_translate_slider.value = y_translate_output.textContent = translation[1];\r\n\r\n  x_translate_slider.addEventListener('input', () => {\r\n    const x_translate = +x_translate_slider.value;\r\n    x_translate_output.textContent = x_translate;\r\n    updateTranslation(0, x_translate);\r\n  });\r\n  y_translate_slider.addEventListener('input', () => {\r\n    const y_translate =  +y_translate_slider.value;\r\n    y_translate_output.textContent = y_translate;\r\n    updateTranslation(1, y_translate);\r\n  })\r\n\r\n  // define rotate slider and its event callback\r\n  const rotate_slider = document.getElementById('rotate');\r\n  const rotate_slider_output = document.getElementById('rotate_output');\r\n  rotate_slider.step = 5.0;\r\n  rotate_slider.min = 0.0;\r\n  rotate_slider.max = 360.0;\r\n  rotate_slider.value = rotate_slider_output.textContent = rotation;\r\n  rotate_slider.addEventListener('input', () => {\r\n    const rotate = +rotate_slider.value;\r\n    rotate_slider_output.textContent = rotate;\r\n    updateRotation(rotate);\r\n  })\r\n\r\n  // define x, y scale slider attributes and event callbacks\r\n  const x_scale_slider = document.getElementById('x_scale');\r\n  const y_scale_slider = document.getElementById('y_scale');\r\n  const x_scale_output = document.getElementById('x_scale_output');\r\n  const y_scale_output = document.getElementById('y_scale_output');\r\n  x_scale_slider.step = y_scale_slider.step = 0.1;\r\n  x_scale_slider.min = y_scale_slider.min = -5.0;\r\n  x_scale_slider.max = y_scale_slider.max = 5.0;\r\n  x_scale_slider.value = x_scale_output.textContent = scale[0];\r\n  y_scale_slider.value = y_scale_output.textContent = scale[1];\r\n  x_scale_slider.addEventListener('input', () => {\r\n    const x_scale = +x_scale_slider.value;\r\n    x_scale_output.textContent = x_scale;\r\n    updateScale(0,x_scale);\r\n  });\r\n  y_scale_slider.addEventListener('input', () => {\r\n    const y_scale = +y_scale_slider.value;\r\n    y_scale_output.textContent = y_scale\r\n    updateScale(1,y_scale);\r\n  });\r\n\r\n  // add an event listener to do5 checkbox\r\n  const do5_checkbox = document.getElementById('do5');\r\n  do5_checkbox.addEventListener('change', () => {\r\n    if(do5_checkbox.checked){\r\n      do5 = true;\r\n      translation = [60,40];\r\n      rotation = 0;\r\n      scale = [0.85, 0.65];\r\n      x_translate_slider.value = x_translate_output.textContent = translation[0];\r\n      y_translate_slider.value = y_translate_output.textContent = translation[1];\r\n      rotate_slider.value = rotate_slider_output.textContent = rotation;\r\n      x_scale_slider.value = x_scale_output.textContent = scale[0];\r\n      y_scale_slider.value = y_scale_output.textContent = scale[1];\r\n      drawScene();\r\n    }else {\r\n      translation = [0, 0];\r\n      rotation = 0;\r\n      scale = [1,1];\r\n      x_translate_slider.value = x_translate_output.textContent = translation[0];\r\n      y_translate_slider.value = y_translate_output.textContent = translation[1];\r\n      rotate_slider.value = rotate_slider_output.textContent = rotation;\r\n      x_scale_slider.value = x_scale_output.textContent = scale[0];\r\n      y_scale_slider.value = y_scale_output.textContent = scale[1];\r\n      drawScene();\r\n      do5 = false;\r\n      drawScene();\r\n    }\r\n  })\r\n\r\n  // add an event listener to doCenter checkbox\r\n  const doCenter_checkbox = document.getElementById('doCenter');\r\n  doCenter_checkbox.addEventListener('change', () => {\r\n    InitializeContext(gl);\r\n    if(doCenter_checkbox.checked) {\r\n      doCenter = true;\r\n      drawScene();\r\n    }else{\r\n      doCenter = false;\r\n      translation = [0, 0];\r\n      x_translate_slider.value = x_translate_output.textContent = translation[0];\r\n      y_translate_slider.value = y_translate_output.textContent = translation[1];\r\n      drawScene();\r\n    }\r\n  });\r\n\r\n  // draw the initial scene\r\n  drawScene();\r\n}catch (e) {\r\n  console.log(e);\r\n}\r\n\r\n\r\n\r\n","/**\r\n * Created by Rick on 2022-01-11.\r\n */\r\n'use strict';\r\n\r\n/** @function createGLcontext\r\n * Create a WebGLRenderingContext from a canvas id.\r\n *\r\n * @param {string} canvas_id The html dom id for the canvas.\r\n * @param {string} context_type The context type. Acceptable values are '2d', 'webgl', 'webgl2', 'bitmaprenderer'.\r\n * @param {Object} options A set of options for the context. See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext}.\r\n * @returns {{gl: WebGLRenderingContext, canvas: HTMLElement}}\r\n */\r\nfunction createGLcontext(canvas_id, context_type='webgl2', options){\r\n  // One-time initialization of the scene.\r\n  const canvas = document.getElementById(canvas_id);\r\n  if(!canvas){\r\n    throw new Error(`createGLContext: Could not locate canvas element with id ${canvas_id}`);\r\n  }\r\n  // Create a WebGLRenderingContext\r\n  const gl = canvas.getContext(context_type, options);\r\n\r\n  return {\r\n    gl: gl,\r\n    canvas: canvas\r\n  };\r\n}\r\n\r\n/** @function\r\n * Initialize the WebGLRenderingContext by clearing the canvas and giving by default a black background.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to be initialized.\r\n * @param {number[]} color_v4 A 4 element vector where the first three values are the RGB values for\r\n *   the canvas background. The fourth is the alpha value.\r\n */\r\nfunction initializeContext(gl, color_v4 = [0.0,0.0,0.0,1.0]){\r\n  // Clear the canvas (red, gree, blue, alpha)\r\n  gl.enable(gl.BLEND);\r\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n  gl.clearColor(color_v4[0], color_v4[1], color_v4[2], color_v4[3]);  // clear to black, fully opaque\r\n  gl.clearDepth(1.0);  // clear everything\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\n/** @function\r\n * Check that the size of the canvas with the css values for width and height are the same.\r\n *\r\n * @param {HTMLElement} canvas The HTML canvas element whose size is to be checked.\r\n * @returns {boolean} Returns TRUE if the size was reassigned.\r\n */\r\nfunction resizeCanvasToDisplaySize(canvas){\r\n  // Lookup the size the browser is displaying the canvas in css pixels\r\n  const displayWidth = canvas.clientWidth;\r\n  const displayHeight = canvas.clientHeight;\r\n\r\n  // Check if the canvas is not the same size\r\n  const needResize = canvas.width !== displayWidth ||\r\n    canvas.height !== displayHeight;\r\n\r\n  if(needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n\r\n  return needResize;\r\n}\r\n\r\n/** @function\r\n * Create a complete rendering program {WebGLProgram}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas.\r\n * @param {WebGLShader} vertex_shader The program's vertex shader.\r\n * @param {WebGLShader} frag_shader The program's fragment shader.\r\n * @returns {WebGLProgram}\r\n */\r\nfunction createProgram(gl, vertex_shader, frag_shader){\r\n  const program = gl.createProgram();\r\n\r\n  // Attach the shader objects\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, frag_shader);\r\n\r\n  // Link the WebGLProgram object\r\n  gl.linkProgram(program);\r\n\r\n  // Check for success\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n  if(!success) {\r\n    const program_info = gl.getProgramInfoLog(program);\r\n    gl.deleteProgram(program);\r\n    throw new Error('createProgram: ' + program_info);\r\n  }else {\r\n    return program;\r\n  }\r\n}\r\n\r\n/** @function\r\n * Creates a shader object {WebGLShader} given\r\n *   the source code. See [WebGLShader]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas\r\n * @param {number} type The type of shader, either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER.\r\n * @param {string} source The code/text of the shader.\r\n * @returns {WebGLShader}\r\n */\r\nfunction createShader(gl, type, source){\r\n  const shader = gl.createShader(type);\r\n  // Put the source code into the gl shader object\r\n  gl.shaderSource(shader, source);\r\n  // Compile the shader code\r\n  gl.compileShader(shader);\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n  if(!success){\r\n    const shader_info = gl.getShaderInfoLog(shader);\r\n    gl.deleteShader(shader);\r\n    throw new Error('createShader: ' + shader_info);\r\n  }else {\r\n    return shader;\r\n  }\r\n}\r\n\r\nexport{\r\n  createGLcontext,\r\n  initializeContext,\r\n  resizeCanvasToDisplaySize,\r\n  createProgram,\r\n  createShader\r\n}"],"names":["$e187b5ac00ec9987$export$3fcd6d93e707659e","$9e00c9a5ff9c2296$export$b67359430d3b1b2","Float32Array","Array","Math","random","$9e00c9a5ff9c2296$var$degree","PI","$9e00c9a5ff9c2296$export$408b8ee5959eefd5","a","hypot","y","i","arguments","length","sqrt","$3df84b0b96c9c096$export$be1b00860175ea1f","constructor","gl","type","program","name","this","attributeLocation","getAttribLocation","buffer","createBuffer","bufferFormat","size","normalize","stride","offset","$3df84b0b96c9c096$export$3889134346f53239","uniformLocation","getUniformLocation","setData","args","uniform1f","uniform2f","uniform4f","uniform2fv","$6b69284e324ddeca$export$185802fd694ee1f5","out","$6b69284e324ddeca$export$2060d2db72cce88f","b","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","doCenter","do5","context","canvas_id","context_type","options","canvas","document","getElementById","Error","getContext","$3df84b0b96c9c096$export$904a8156d3f18680","displayWidth","clientWidth","displayHeight","clientHeight","needResize","width","height","$3df84b0b96c9c096$export$4d986a341d0b1b6c","viewport","vShader","$3df84b0b96c9c096$export$1750aa77609e1fb","VERTEX_SHADER","fShader","FRAGMENT_SHADER","vertex_shader","frag_shader","$3df84b0b96c9c096$export$327d24a04cd0dc17","useProgram","FLOAT","positionAttrib","STATIC_DRAW","vao","createVertexArray","bindVertexArray","transformUniform","primitiveType","TRIANGLES","prim_offset","triangle_count","translation","rotation","scale1","$c1ae0c88b265d8df$var$getTranslationMatrix","translate","translate_m3","v","$c1ae0c88b265d8df$var$getRotationMatrix","rotate_deg","rotate_m3","rad","s","c","sin","cos","$c1ae0c88b265d8df$var$getScaleMatrix","scale2","scale_m3","$c1ae0c88b265d8df$var$drawScene","color_v4","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","$3df84b0b96c9c096$export$881f7fb71351b304","transform_m3","moveOrigin_m3","drawArrays","$c1ae0c88b265d8df$var$updateTranslation","index","value","$c1ae0c88b265d8df$var$updateScale","x_translate_slider","y_translate_slider","x_translate_output","y_translate_output","step","min","max","textContent","addEventListener","x_translate","y_translate","rotate_slider","rotate_slider_output","rotate","x_scale_slider","y_scale_slider","x_scale_output","y_scale_output","x_scale","y_scale","do5_checkbox","checked","doCenter_checkbox","e"],"version":3,"file":"index.945961de.js.map"}