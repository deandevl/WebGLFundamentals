{"mappings":"AAQE,MAACA,EAAA,CACD,EAAI,EACJ,GAAG,EACH,EAAG,IACH,EAAI,IACJ,GAAI,EAEJ,GACA,IACA,GAAK,EACL,IAAI,EACJ,GAAI,GACJ,GAAK,GACL,IAAK,EAEL,IACA,GACA,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACL,OCxB+C,oBAAjBC,cAA+BA,aAC1CC,KAAKC,OAUzB,IAAIC,EAASF,KAAKG,GAAK,aAOPC,EAASC,GACvB,OAAOA,EAAIH,EAeRF,KAAKM,QAAON,KAAKM,MAAQ,eAC5B,IAAIC,EAAI,EACJC,EAAIC,UAAUC,OAEXF,KACLD,GAAKE,UAAUD,GAAKC,UAAUD,GAGhC,OAAOR,KAAKW,KAAKJ,WCzBfK,EAgBAC,YAAAC,EAAAC,EAAAC,EAAAC,GACAC,KAAKJ,GAAGA,EAQRI,KAAKH,KAAGA,EAGVG,KAAAC,kBAAAD,KAAAJ,GAAAM,kBAAAJ,EAAAC,GAMEC,KAAKG,OAAGH,KAAWJ,GAAAQ,eAgBfC,aAAAC,EAAAC,EAAAC,EAAAC,kcCtDJC,EAcEf,YAAgBC,EAAhBE,EAAAC,EAAAF,GACEG,KAAAJ,GAAAA,EACAI,KAAAH,KAAAA,EAEAG,KAAAW,gBAAQf,EAAUgB,mBAAKd,EAAuBC,GAO9Cc,WAAAC,GACF,OAAAd,KAAAH,MACE,IAAA,YACAG,KAAKJ,GAALmB,UAAAf,KAAAW,gBAAAG,EAAA,IACE,MACF,IAAA,YACAd,KAAKJ,GAALoB,UAAAhB,KAAAW,gBAAAG,EAAA,GAAAA,EAAA,IACE,MACF,IAAA,YACAd,KAAKJ,GAALqB,UAAAjB,KAAAW,gBAAAG,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACE,MACF,IAAA,aACAd,KAAKJ,GAALsB,WAAAlB,KAAAW,gBAAAG,EAAA,UAEA,IAAA,2DAEN,gjBCxCE,MAAMK,ECKR,SAAAC,EAAAC,EAAA,SAAAC,GAGF,MAAAC,EAAAC,SAAAC,eAAAL,GAO2C,IAAAG,EAAA,MAAA,IAAAG,MAAA,4DAAAN,KAAY,MAAA,CAAGxB,GAAP2B,EAAAI,WAAAN,EAAAC,GACjDC,OAAAA,GDhBiBK,CAAc,aAEGhC,EAAAuB,EAAAvB,ICgElC,SAAA2B,GAGA,MAAIM,EAAJN,EAAAO,YACEC,EAAkBR,EAAMS,aAExBC,EAAeV,EAAkBW,QAAAL,GAAeN,EAAhDY,SAAAJ,EACDE,IAKHV,EAAAW,MAAAL,EAUEN,EAAMY,OAAYJ,GDjFhBK,CAJAjB,EAAAI,QAKA3B,EAAAyC,SAAM,EAAO,EAAGzC,EAAA2B,OAAAW,MAAAtC,EAAA2B,OAAAY,QAGhB,MAAwBG,EAAAC,EAAA3C,EAAAA,EAAA4C,w7BAClBC,EAAUF,EAAa3C,EAAGA,EAAE8C,4NAE/B5C,ECwFP,SAAAF,EAAA+C,EAAAC,kODxFkBC,CAAOjD,EAAA0C,EAAAG,GAGrB7C,EAAkDkD,WAAAhD,GAGlD,MAAwBD,EAAAD,EAAAmD,MACxBC,EAAuB,IAAAtD,EAAwBE,EAAAC,EAAAC,EAAW,iBAG1DkD,EAAenC,QAAAjC,EAAiBgB,EAAAqD,aAEhC,MAAGC,EAAAtD,EAAAuD,oBAGHvD,EAACwD,gBAAAF,IAGC,MAAM5C,EAAM,EAC0BC,GAAA,EAChCC,EAAS,EAEhBC,EAAA,EAEiBuC,EAAA3C,aAAAC,EAAAC,EAAAC,EAAAC,GAIO,IAAAC,EAAiBd,EAAAE,EAAqB,kBAAa,aAC/De,QAAajB,EAAA2B,OAAUW,MAAKtC,EAAA2B,OAAUY,QAE7C,IAAkBzB,EAAOd,EAAAE,EAAiB,aAA2B,aACvEe,QAAe/B,KAAAC,SAAAD,KAAAC,SAAAD,KAAAC,SAAA,GAAA,MAACsE,EAAA,IAAA3C,EAAAd,EAAAE,EAAA,mBAAA,aAAE,IAAAwD,EAAC,CAAC,EACxB,GAGAD,EAAgBxC,QAAAyC,EAAA,GAAAA,EAAA,IAAA,MAACC,EAAA,IAAA7C,EAAAd,EAAAE,EAAA,gBAAA,aAAC,IAAA0D,EAAC,CAAC,EACpB,GAGAD,EAAa1C,QAAA2C,EAAA,GAAAA,EAAA,IAAA,MAACC,EAAA,IAAA/C,EAAAd,EAAAE,EAAA,aAAA,aAAC,IAAA4D,EAAC,CAAC,EACjB,GAIAD,EAA0C5C,QAAA6C,EAAA,GAAAA,EAAA,UACjC,WAGFC,KC/BT,SAAA/D,EAAAgE,EAAA,CACA,EAEA,EACA,EAGA,IAGEhE,EAAAiE,OAAMjE,EAACkE,OACTlE,EAAAmE,UAAAnE,EAAAoE,UAAApE,EAAAqE,qBAEArE,EAAAsE,WAAON,EAAP,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACFhE,EAAAuE,WAAA,GAEAvE,EAAAwE,MAAAxE,EAAAyE,iBAAAzE,EAAA0E,kBDgBMC,CAAqB3E,GACrB,MAAM4E,EAAc5E,EAAK6E,UAI+B7E,EAAA8E,WAAAF,EAH1C,EACf,IAMD,MAAMG,EAAqBnD,SAASC,eAAe,eAC7CmD,EAAqBpD,SAASC,eAAe,eACnDoD,EAA0BrD,SAAAC,eAAuB,sBACjDqD,EAAyBtD,SAAAC,eAA0B,sBACnDkD,EAAmBI,KAAMH,EAAmBG,KAAM,EAClDJ,EAAmBK,IAAKJ,EAAGI,IAAmB,EAC9CL,EAAmBM,IAAKL,EAAGK,IAAmB,IAE9CN,EAAmBO,MAAAL,EAAwBM,YAAS7B,EAAA,KACrC4B,MAAIJ,EAAmBK,YAAe7B,EAAA,KACnD8B,iBAA2B,SAAa,KACxC9B,EAAA,GAAAuB,EAASM,aAAAR,EAAAO,MACV7B,EAAAxC,QAAAyC,EAAA,GAAAA,EAAA,IACDK,SAEEyB,iBAA2B,SAAa,KACxC9B,EAAA,GAAAwB,EAASK,aAAAP,EAAAM,MACV7B,EAAAxC,QAAAyC,EAAA,GAAAA,EAAA,IAE4DK,OAG7D,MAAM0B,EAAkB7D,SAASC,eAAe,YAC1C6D,EAAkB9D,SAASC,eAAe,YAChD8D,EAAuB/D,SAAAC,eAAuB,mBAC9C+D,EAAsBhE,SAAAC,eAA0B,mBAChD4D,EAAgBN,KAAMO,EAAgBP,KAAS,GAC/CM,EAAgBL,IAAKM,EAAGN,KAAgB,EACxCK,EAAgBJ,IAAKK,EAAGL,IAAgB,EACxCI,EAAgBH,MAAAK,EAAwBJ,YAAS3B,EAAA,KACrC0B,MAAIM,EAAgBL,YAAgB3B,EAAA,KACpC4B,iBAAmB,SAAC,KAC9B5B,EAAA,GAAA+B,EAAwBJ,cAAsBE,EAACH,OAAAO,QAAA,GAC/CjC,EAAA,GAAAgC,EAAAL,YAASrG,KAAAW,KAAA,EAAAX,KAAA4G,IAAAlC,EAAA,GAAA,IAAAiC,QAAA,GACVlC,EAAA1C,QAAA2C,EAAA,GAAAA,EAAA,IACDG,SAEYyB,iBAAmB,SAAC,KAC9B5B,EAAA,GAAAgC,EAAwBL,cAAsBG,EAACJ,OAAAO,QAAA,GAC/CjC,EAAA,GAAA+B,EAAAJ,YAASrG,KAAAW,KAAA,EAAAX,KAAA4G,IAAAlC,EAAA,GAAA,IAAAiC,QAAA,GACVlC,EAAA1C,QAAA2C,EAAA,GAAAA,EAAA,IAEyDG,OAG1D,MAAMgC,EAAiBnE,SAASC,eAAe,WACzCmE,EAAiBpE,SAASC,eAAe,WAC/CoE,EAAsBrE,SAAAC,eAAyB,kBAC/CqE,EAAqBtE,SAAAC,eAAwB,kBAC7CkE,EAAeZ,KAAMa,EAAeb,KAAS,GAC7CY,EAAeX,IAAKY,EAAGZ,IAAe,GACtCW,EAAeV,IAAKW,EAAGX,IAAe,EACtCU,EAAeT,MAAAW,EAAwBV,YAASzB,EAAA,KACnCwB,MAAAY,EAAeX,YAAezB,EAAA,KACzC0B,iBAA4B,SAAS,KACrC1B,EAAA,GAAAmC,EAAAV,aAASQ,EAAAT,MACVzB,EAAA5C,QAAA6C,EAAA,GAAAA,EAAA,IACDC,SAEEyB,iBAA4B,SAAS,KACrC1B,EAAA,GAAAoC,EAAAX,aAASS,EAAAV,MACVzB,EAAA5C,QAAA6C,EAAA,GAAAA,EAAA,IAE4CC,OAG7C,MAAAoC,EAAuBvE,SAAAC,eAAA,SACvBuE,EAAsBxE,SAAAC,eAAA,gBACtBsE,EAAahB,KAAM,EACnBgB,EAAaf,IAAK,EAClBe,EAAad,IAAA,MACHC,MAAAc,EAAoBb,YAAec,IACrCb,iBAAgB,SAAA,KACtBa,EAAAD,EAA4Bb,aAAKY,EAAqBb,MACtD,MAAAgB,EAAAhH,EAAS+G,GACV1C,EAAA1C,QAAA/B,KAAAqH,IAAAD,GAAApH,KAAAsH,IAAAF,IAEwBvC,OAGzBA,IACD,MAAA0C","sources":["positions-colors/F-2D.js","node_modules/gl-matrix/esm/common.js","node_modules/web-gl-helpers/dist/src/AttributeClass.js","node_modules/web-gl-helpers/dist/src/UniformClass.js","2_2Dtranslationrotationscalematrix/a.trsusinguniforms/main.js","node_modules/web-gl-helpers/dist/src/HelperFunctions.js"],"sourcesContent":["/**\r\n * Created by Rick on 2021-12-24.\r\n */\r\n'use strict';\r\n\r\n// in pixel values\r\nconst F_2D_positions_list = [\r\n  // left column\r\n  0, 0,\r\n  30, 0,\r\n  0, 150,\r\n  0, 150,\r\n  30, 0,\r\n  30, 150,\r\n\r\n  // top rung\r\n  30, 0,\r\n  100, 0,\r\n  30, 30,\r\n  30, 30,\r\n  100, 0,\r\n  100, 30,\r\n\r\n  // middle rung\r\n  30, 60,\r\n  67, 60,\r\n  30, 90,\r\n  30, 90,\r\n  67, 60,\r\n  67, 90,\r\n]\r\nexport {\r\n  F_2D_positions_list\r\n}","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * AttributeClass provides functions for working with a WebGLProgram's attribute variable.\r\n *   The class establishes a data buffer for sending vertex attributes, such as vertex coordinates,\r\n *   texture coordinate data, or vertex color data through the graphics hardware pipeline.\r\n *   See [WebGL Fundamentals](https://webgl2fundamentals.org/webgl/lessons/webgl-fundamentals.html) for\r\n *   an explanation on data buffers.\r\n *\r\n */\r\nexport default class AttributeClass {\r\n  /**\r\n   * Create an AttributeClass instance\r\n   * @param {WebGLRenderingContext} gl The WebGL context\r\n   * @param {number} type  Specifying the [data type]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer}\r\n   *   of each component in the array.\r\n   * @param {WebGLProgram} program The WebGL program.\r\n   * @param {string} name The name of the attribute variable.\r\n   */\r\n  constructor(gl, type, program, name) {\r\n    this.gl = gl;\r\n    this.type = type;\r\n    // Look up where the attribute needs to go\r\n    this.attributeLocation = this.gl.getAttribLocation(program, name);\r\n    this.buffer = this.gl.createBuffer();\r\n  }\r\n\r\n  /**\r\n   * Describes how the attribute is read from the buffer pipeline.\r\n   * @param {number} size  The number of components per vertex attribute. Must be 1, 2, 3, or 4.\r\n   * @param {boolean} normalize Specifying whether integer data values should be normalized.\r\n   * @param {number} stride Specifying the offset in bytes between the beginning of consecutive vertex attributes.\r\n   * @param {number} offset Specifying an offset in bytes of the first component in the vertex attribute array.\r\n   */\r\n  bufferFormat(size, normalize, stride, offset) {\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Tell the attribute how to get data out of the internal ARRAY_BUFFER\r\n    this.gl.vertexAttribPointer(\r\n      this.attributeLocation,\r\n      size,\r\n      this.type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    this.gl.enableVertexAttribArray(this.attributeLocation);\r\n  }\r\n\r\n  /**\r\n   * Initializes and creates the buffer object's data store.\r\n   * @param {number[]} attribute_list Array containing vertex attributes, such as vertex coordinates, texture coordinate data, or vertex color data.\r\n   * @param {number} usage Specifies the intended [usage pattern]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData} of the data store for optimization purposes.\r\n   */\r\n  setData(attribute_list, usage){\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Set geometry\r\n    switch(this.type){\r\n      case this.gl.FLOAT:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Float32Array(attribute_list),\r\n          usage\r\n        );\r\n      break;\r\n      case this.gl.UNSIGNED_BYTE:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Uint8Array(attribute_list),\r\n          usage\r\n        );\r\n        break;\r\n    }\r\n  }\r\n}","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * UniformClass creates and sets various types\r\n *   of [uniform variables]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform}\r\n *   defined in shader code.\r\n */\r\nexport default class UniformClass {\r\n  /**\r\n   * Create a UninformClass instance\r\n   * @param {WebGLRenderingContext} gl The WebGL context.\r\n   * @param {WebGLProgram} program The WebGL program.\r\n   * @param {string} name The name of the uniform variable.\r\n   * @param {string} type The type of uniform variable.\r\n   */\r\n  constructor(gl, program, name, type) {\r\n    this.gl = gl;\r\n    this.type = type;\r\n    // Look up where the uniform needs to go\r\n    this.uniformLocation = gl.getUniformLocation(program, name);\r\n  }\r\n\r\n  /**\r\n   * Set the value of the uniform variable.\r\n   * @param {number[]} args Array of values for the uniform variable.\r\n   *   The number of array elements submitted depends on the type of\r\n   *   variable being set.\r\n   */\r\n  setData(...args){\r\n    switch (this.type) {\r\n      case 'uniform1f':\r\n        this.gl.uniform1f(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform2f':\r\n        this.gl.uniform2f(this.uniformLocation, args[0], args[1]);\r\n        break;\r\n      case 'uniform4f':\r\n        this.gl.uniform4f(this.uniformLocation, args[0], args[1], args[2], args[3]);\r\n        break;\r\n      case 'uniform2fv':\r\n        this.gl.uniform2fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform3fv':\r\n        this.gl.uniform3fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniform4fv':\r\n        this.gl.uniform4fv(this.uniformLocation, args[0]);\r\n        break;\r\n      case 'uniformMatrix3fv':\r\n        this.gl.uniformMatrix3fv(this.uniformLocation,false,args[0]);\r\n        break;\r\n      case 'uniformMatrix4fv':\r\n        this.gl.uniformMatrix4fv(this.uniformLocation,false,args[0]);\r\n        break;\r\n      default:\r\n        throw new Error(`UniformClass: function ${this.type} has not been implemented.`);\r\n    }\r\n  }\r\n}","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\nimport {F_2D_positions_list} from '../../positions-colors/F-2D.js';\r\nimport {vertex_shader, fragment_shader} from \"./shaders.js\";\r\nimport {AttributeClass} from \"web-gl-helpers\";\r\nimport {UniformClass} from \"web-gl-helpers\";\r\nimport {resizeCanvasToDisplaySize} from \"web-gl-helpers\"\r\nimport {createShader} from \"web-gl-helpers\";\r\nimport {createGLcontext} from \"web-gl-helpers\";\r\nimport {createProgram} from \"web-gl-helpers\";\r\nimport {initializeContext} from \"web-gl-helpers\";\r\n\r\nimport {toRadian} from 'gl-matrix/esm/common';\r\n\r\n  try {\r\n    const context = createGLcontext('my_canvas');\r\n    const gl = context.gl;\r\n    const canvas = context.canvas;\r\n\r\n    // Check canvas width and height\r\n    resizeCanvasToDisplaySize(canvas);\r\n\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    // Create shader objects\r\n    const vShader = createShader(gl, gl.VERTEX_SHADER, vertex_shader);\r\n    const fShader = createShader(gl, gl.FRAGMENT_SHADER, fragment_shader);\r\n\r\n    // Create a WebGLProgram\r\n    const program = createProgram(gl, vShader, fShader);\r\n    // Tell context to use our program (a pair of shaders)\r\n    gl.useProgram(program);\r\n\r\n    // Set up position attribute 'a_position_v2'\r\n    // Create the attribute position data (a_position)\r\n    const type = gl.FLOAT; // the data is 32bit floats\r\n    const positionAttrib = new AttributeClass(gl, type, program, 'a_position_v2');\r\n    // Set the position data\r\n    positionAttrib.setData(F_2D_positions_list, gl.STATIC_DRAW);\r\n\r\n    // Associate shader attributes with corresponding data buffers\r\n    const vao = gl.createVertexArray();\r\n    // Make vao the one we're currently working with\r\n    gl.bindVertexArray(vao);\r\n\r\n    // Specify how to pull the data out\r\n    {\r\n      const size = 2; // 2 components per iteration\r\n      const normalize = false; // don't normalize the data\r\n      const stride = 0; // 0 = move forward size * sizeof(type) each\r\n      //  iteration to get the next position\r\n      const offset = 0; // start at the beginning of the buffer\r\n      positionAttrib.bufferFormat(size, normalize, stride, offset);\r\n    }\r\n\r\n    // Set up uniforms\r\n    const resolutionUniform = new UniformClass(gl, program, 'u_resolution_v2', 'uniform2f');\r\n    resolutionUniform.setData(gl.canvas.width, gl.canvas.height);\r\n\r\n    const colorUniform = new UniformClass(gl, program, 'u_color_v4', 'uniform4f');\r\n    colorUniform.setData(Math.random(), Math.random(), Math.random(), 1);\r\n\r\n    const translationUniform = new UniformClass(gl, program, 'u_translation_v2', 'uniform2f');\r\n    let translation = [0, 0];\r\n    translationUniform.setData(translation[0], translation[1]);\r\n\r\n    const rotationUniform = new UniformClass(gl, program, 'u_rotation_v2', 'uniform2f');\r\n    let rotation = [0,1];\r\n    rotationUniform.setData(rotation[0], rotation[1]);\r\n\r\n    const scaleUniform = new UniformClass(gl, program, 'u_scale_v2', 'uniform2f');\r\n    let scale = [1,1];\r\n    scaleUniform.setData(scale[0], scale[1]);\r\n\r\n    let angle = 0;\r\n\r\n    // define a function for drawing the scene\r\n    function drawScene(){\r\n      initializeContext(gl);\r\n\r\n      const primitiveType = gl.TRIANGLES;\r\n      const prim_offset = 0;\r\n      const triangle_count = 18;\r\n      gl.drawArrays(primitiveType, prim_offset, triangle_count);\r\n    }\r\n\r\n    // set up the user interface for changes to the parameters\r\n    // define x, y translation slider attributes and event callbacks\r\n    const x_translate_slider = document.getElementById('x_translate');\r\n    const y_translate_slider = document.getElementById('y_translate');\r\n    const x_translate_output = document.getElementById('x_translate_output');\r\n    const y_translate_output = document.getElementById('y_translate_output');\r\n    x_translate_slider.step = y_translate_slider.step = 4;\r\n    x_translate_slider.min = y_translate_slider.min = 0;\r\n    x_translate_slider.max = y_translate_slider.max = 800;\r\n    x_translate_slider.value = x_translate_output.textContent = translation[0];\r\n    y_translate_slider.value = y_translate_output.textContent = translation[1];\r\n\r\n    x_translate_slider.addEventListener('input', () => {\r\n      translation[0] = x_translate_output.textContent = +x_translate_slider.value;\r\n      translationUniform.setData(translation[0], translation[1]);\r\n      drawScene();\r\n    });\r\n    y_translate_slider.addEventListener('input', () => {\r\n      translation[1] = y_translate_output.textContent = +y_translate_slider.value;\r\n      translationUniform.setData(translation[0], translation[1]);\r\n      drawScene();\r\n    })\r\n\r\n    // define x, y rotation slider attributes and event callbacks\r\n    const x_rotate_slider = document.getElementById('x_rotate');\r\n    const y_rotate_slider = document.getElementById('y_rotate');\r\n    const x_rotate_output = document.getElementById('x_rotate_output');\r\n    const y_rotate_output = document.getElementById('y_rotate_output');\r\n    x_rotate_slider.step = y_rotate_slider.step = 0.1;\r\n    x_rotate_slider.min = y_rotate_slider.min = -1.0;\r\n    x_rotate_slider.max = y_rotate_slider.max = 1.0;\r\n    x_rotate_slider.value = x_rotate_output.textContent = rotation[0];\r\n    y_rotate_slider.value = y_rotate_output.textContent = rotation[1];\r\n    x_rotate_slider.addEventListener('input', () => {\r\n      rotation[0] = x_rotate_output.textContent = (+x_rotate_slider.value).toFixed(2);\r\n      rotation[1] = y_rotate_output.textContent = Math.sqrt(1 - Math.pow(rotation[0],2)).toFixed(2);\r\n      rotationUniform.setData(rotation[0], rotation[1]);\r\n      drawScene();\r\n    });\r\n    y_rotate_slider.addEventListener('input', () => {\r\n      rotation[1] = y_rotate_output.textContent = (+y_rotate_slider.value).toFixed(2);\r\n      rotation[0] = x_rotate_output.textContent = Math.sqrt(1 - Math.pow(rotation[1],2)).toFixed(2);\r\n      rotationUniform.setData(rotation[0], rotation[1]);\r\n      drawScene();\r\n    });\r\n\r\n    // define x, y scale slider attributes and event callbacks\r\n    const x_scale_slider = document.getElementById('x_scale');\r\n    const y_scale_slider = document.getElementById('y_scale');\r\n    const x_scale_output = document.getElementById('x_scale_output');\r\n    const y_scale_output = document.getElementById('y_scale_output');\r\n    x_scale_slider.step = y_scale_slider.step = 0.2;\r\n    x_scale_slider.min = y_scale_slider.min = 0.2;\r\n    x_scale_slider.max = y_scale_slider.max = 4.0;\r\n    x_scale_slider.value = x_scale_output.textContent = scale[0];\r\n    y_scale_slider.value = y_scale_output.textContent = scale[1];\r\n    x_scale_slider.addEventListener('input', () => {\r\n      scale[0] = x_scale_output.textContent = +x_scale_slider.value;\r\n      scaleUniform.setData(scale[0], scale[1]);\r\n      drawScene();\r\n    });\r\n    y_scale_slider.addEventListener('input', () => {\r\n      scale[1] = y_scale_output.textContent = +y_scale_slider.value;\r\n      scaleUniform.setData(scale[0], scale[1]);\r\n      drawScene();\r\n    });\r\n\r\n    // define angle slider and its event callback\r\n    const angle_slider = document.getElementById('angle');\r\n    const angle_slider_output = document.getElementById('angle_output');\r\n    angle_slider.step = 5.0;\r\n    angle_slider.min = 0.0;\r\n    angle_slider.max = 360.0;\r\n    angle_slider.value = angle_slider_output.textContent = angle;\r\n    angle_slider.addEventListener('input', () => {\r\n      angle = angle_slider_output.textContent = +angle_slider.value;\r\n      const angle_radians = toRadian(angle);\r\n      rotationUniform.setData(Math.sin(angle_radians), Math.cos(angle_radians));\r\n      drawScene();\r\n    })\r\n\r\n    // draw the initial scene\r\n    drawScene();\r\n  }catch (e) {\r\n    console.log(e.message);\r\n  }\r\n\r\n\r\n","/**\r\n * Created by Rick on 2022-01-11.\r\n */\r\n'use strict';\r\n\r\n/** @function createGLcontext\r\n * Create a WebGLRenderingContext from a canvas id.\r\n *\r\n * @param {string} canvas_id The html dom id for the canvas.\r\n * @param {string} context_type The context type. Acceptable values are '2d', 'webgl', 'webgl2', 'bitmaprenderer'.\r\n * @param {Object} options A set of options for the context. See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext}.\r\n * @returns {{gl: WebGLRenderingContext, canvas: HTMLElement}}\r\n */\r\nfunction createGLcontext(canvas_id, context_type='webgl2', options){\r\n  // One-time initialization of the scene.\r\n  const canvas = document.getElementById(canvas_id);\r\n  if(!canvas){\r\n    throw new Error(`createGLContext: Could not locate canvas element with id ${canvas_id}`);\r\n  }\r\n  // Create a WebGLRenderingContext\r\n  const gl = canvas.getContext(context_type, options);\r\n\r\n  return {\r\n    gl: gl,\r\n    canvas: canvas\r\n  };\r\n}\r\n\r\n/** @function\r\n * Initialize the WebGLRenderingContext by clearing the canvas and giving by default a black background.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to be initialized.\r\n * @param {number[]} color_v4 A 4 element vector where the first three values are the RGB values for\r\n *   the canvas background. The fourth is the alpha value.\r\n */\r\nfunction initializeContext(gl, color_v4 = [0.0,0.0,0.0,1.0]){\r\n  // Clear the canvas (red, gree, blue, alpha)\r\n  gl.enable(gl.BLEND);\r\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n  gl.clearColor(color_v4[0], color_v4[1], color_v4[2], color_v4[3]);  // clear to black, fully opaque\r\n  gl.clearDepth(1.0);  // clear everything\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\n/** @function\r\n * Check that the size of the canvas with the css values for width and height are the same.\r\n *\r\n * @param {HTMLElement} canvas The HTML canvas element whose size is to be checked.\r\n * @returns {boolean} Returns TRUE if the size was reassigned.\r\n */\r\nfunction resizeCanvasToDisplaySize(canvas){\r\n  // Lookup the size the browser is displaying the canvas in css pixels\r\n  const displayWidth = canvas.clientWidth;\r\n  const displayHeight = canvas.clientHeight;\r\n\r\n  // Check if the canvas is not the same size\r\n  const needResize = canvas.width !== displayWidth ||\r\n    canvas.height !== displayHeight;\r\n\r\n  if(needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n\r\n  return needResize;\r\n}\r\n\r\n/** @function\r\n * Create a complete rendering program {WebGLProgram}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas.\r\n * @param {WebGLShader} vertex_shader The program's vertex shader.\r\n * @param {WebGLShader} frag_shader The program's fragment shader.\r\n * @returns {WebGLProgram}\r\n */\r\nfunction createProgram(gl, vertex_shader, frag_shader){\r\n  const program = gl.createProgram();\r\n\r\n  // Attach the shader objects\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, frag_shader);\r\n\r\n  // Link the WebGLProgram object\r\n  gl.linkProgram(program);\r\n\r\n  // Check for success\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n  if(!success) {\r\n    const program_info = gl.getProgramInfoLog(program);\r\n    gl.deleteProgram(program);\r\n    throw new Error('createProgram: ' + program_info);\r\n  }else {\r\n    return program;\r\n  }\r\n}\r\n\r\n/** @function\r\n * Creates a shader object {WebGLShader} given\r\n *   the source code. See [WebGLShader]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas\r\n * @param {number} type The type of shader, either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER.\r\n * @param {string} source The code/text of the shader.\r\n * @returns {WebGLShader}\r\n */\r\nfunction createShader(gl, type, source){\r\n  const shader = gl.createShader(type);\r\n  // Put the source code into the gl shader object\r\n  gl.shaderSource(shader, source);\r\n  // Compile the shader code\r\n  gl.compileShader(shader);\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n  if(!success){\r\n    const shader_info = gl.getShaderInfoLog(shader);\r\n    gl.deleteShader(shader);\r\n    throw new Error('createShader: ' + shader_info);\r\n  }else {\r\n    return shader;\r\n  }\r\n}\r\n\r\nexport{\r\n  createGLcontext,\r\n  initializeContext,\r\n  resizeCanvasToDisplaySize,\r\n  createProgram,\r\n  createShader\r\n}"],"names":["$e187b5ac00ec9987$export$3fcd6d93e707659e","Float32Array","Math","random","$9e00c9a5ff9c2296$var$degree","PI","$9e00c9a5ff9c2296$export$408b8ee5959eefd5","a","hypot","y","i","arguments","length","sqrt","$3df84b0b96c9c096$export$be1b00860175ea1f","constructor","gl","type","program","name","this","attributeLocation","getAttribLocation","buffer","createBuffer","bufferFormat","size","normalize","stride","offset","$3df84b0b96c9c096$export$3889134346f53239","uniformLocation","getUniformLocation","setData","args","uniform1f","uniform2f","uniform4f","uniform2fv","context","canvas_id","context_type","options","canvas","document","getElementById","Error","getContext","$3df84b0b96c9c096$export$904a8156d3f18680","displayWidth","clientWidth","displayHeight","clientHeight","needResize","width","height","$3df84b0b96c9c096$export$4d986a341d0b1b6c","viewport","vShader","$3df84b0b96c9c096$export$1750aa77609e1fb","VERTEX_SHADER","fShader","FRAGMENT_SHADER","vertex_shader","frag_shader","$3df84b0b96c9c096$export$327d24a04cd0dc17","useProgram","FLOAT","positionAttrib","STATIC_DRAW","vao","createVertexArray","bindVertexArray","translationUniform","translation","rotationUniform","rotation","scaleUniform","scale","$afbed1bdd277f0a1$var$drawScene","color_v4","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","$3df84b0b96c9c096$export$881f7fb71351b304","primitiveType","TRIANGLES","drawArrays","x_translate_slider","y_translate_slider","x_translate_output","y_translate_output","step","min","max","value","textContent","addEventListener","x_rotate_slider","y_rotate_slider","x_rotate_output","y_rotate_output","toFixed","pow","x_scale_slider","y_scale_slider","x_scale_output","y_scale_output","angle_slider","angle_slider_output","angle","angle_radians","sin","cos","e"],"version":3,"file":"index.4f8051e0.js.map"}