"undefined"!=typeof Float32Array&&Float32Array,Math.random;Math.PI;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});class t{constructor(t,e,o,n){this.gl=t,this.type=e,this.attributeLocation=this.gl.getAttribLocation(o,n),this.buffer=this.gl.createBuffer()}bufferFormat(t,e,o,n){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.gl.vertexAttribPointer(this.attributeLocation,t,this.type,e,o,n),this.gl.enableVertexAttribArray(this.attributeLocation)}setData(t,e){switch(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.type){case this.gl.FLOAT:this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),e);break;case this.gl.UNSIGNED_BYTE:this.gl.bufferData(this.gl.ARRAY_BUFFER,new Uint8Array(t),e)}}}class e{constructor(t,e,o,n){this.gl=t,this.type=n,this.uniformLocation=t.getUniformLocation(e,o)}setData(...t){switch(this.type){case"uniform1f":this.gl.uniform1f(this.uniformLocation,t[0]);break;case"uniform2f":this.gl.uniform2f(this.uniformLocation,t[0],t[1]);break;case"uniform4f":this.gl.uniform4f(this.uniformLocation,t[0],t[1],t[2],t[3]);break;case"uniform2fv":this.gl.uniform2fv(this.uniformLocation,t[0]);break;case"uniform3fv":this.gl.uniform3fv(this.uniformLocation,t[0]);break;case"uniform4fv":this.gl.uniform4fv(this.uniformLocation,t[0]);break;case"uniformMatrix3fv":this.gl.uniformMatrix3fv(this.uniformLocation,!1,t[0]);break;case"uniformMatrix4fv":this.gl.uniformMatrix4fv(this.uniformLocation,!1,t[0]);break;default:throw new Error(`UniformClass: function ${this.type} has not been implemented.`)}}}function o(t,e,o){const n=t.createShader(e);t.shaderSource(n,o),t.compileShader(n);if(t.getShaderParameter(n,t.COMPILE_STATUS))return n;{const e=t.getShaderInfoLog(n);throw t.deleteShader(n),new Error("createShader: "+e)}}try{const i=function(t,e="webgl2",o){const n=document.getElementById(t);if(!n)throw new Error(`createGLContext: Could not locate canvas element with id ${t}`);return{gl:n.getContext(e,o),canvas:n}}("my_canvas"),a=i.gl;!function(t){const e=t.clientWidth,o=t.clientHeight,n=t.width!==e||t.height!==o;n&&(t.width=e,t.height=o)}(i.canvas),a.viewport(0,0,a.canvas.width,a.canvas.height);const s=o(a,a.VERTEX_SHADER,"#version 300 es\n\n// Receive position data from the buffer\nin vec2 a_position_v2;\n\n// Used to pass in the resolution of the canvas\nuniform vec2 u_resolution_v2;\n\nvoid main() {\n  // convert the position from pixels to 0.0 to 1.0\n  vec2 zeroToOne_v2 = a_position_v2 / u_resolution_v2;\n\n  // convert from 0->1 to 0->2\n  vec2 zeroToTwo_v2 = zeroToOne_v2 * 2.0;\n\n  // convert from 0->2 to -1 -> +1 (clip space)\n  vec2 clipSpace_v2 = zeroToTwo_v2 - 1.0;\n\n  // flip and assign position\n  gl_Position = vec4(clipSpace_v2 * vec2(1, -1), 0, 1);\n}"),c=function(t,e,o){const n=t.createProgram();if(t.attachShader(n,e),t.attachShader(n,o),t.linkProgram(n),t.getProgramParameter(n,t.LINK_STATUS))return n;{const e=t.getProgramInfoLog(n);throw t.deleteProgram(n),new Error("createProgram: "+e)}}(a,s,o(a,a.FRAGMENT_SHADER,'#version 300 es\n\n// Fragment shaders don\'t have a default precision so we need\n//   to pick one. highp is a good default. It means "high precision"\n\nprecision highp float;\n\n// Color to be set by the program\nuniform vec4 u_color_v4;\n\n// We need to declare an output for the fragment shader\nout vec4 outColor_v4;\n\nvoid main() {\n  // outColor variable is responsible for setting (red, green, blue)\n  outColor_v4 = u_color_v4;\n}'));a.useProgram(c);const h=a.FLOAT,f=new t(a,h,c,"a_position_v2"),u=a.createVertexArray();a.bindVertexArray(u);{const t=2,e=!1,o=0,n=0;f.bufferFormat(t,h,e,o,n)}new e(a,c,"u_resolution_v2","uniform2f").setData(a.canvas.width,a.canvas.height);const l=new e(a,c,"u_color_v4","uniform4f");!function(t,e=[0,0,0,1]){t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.clearColor(e[0],e[1],e[2],e[3]),t.clearDepth(1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)}(a);for(let t=0;t<50;++t){const t=r(n(300),n(300),n(300),n(300));f.setData(t,a.STATIC_DRAW),l.setData(Math.random(),Math.random(),Math.random(),1);const e=a.TRIANGLES,o=0,i=6;a.drawArrays(e,o,i)}}catch(t){console.log(t.message)}function n(t){return Math.floor(Math.random()*t)}function r(t,e,o,n){const r=t+o,i=e+n;return[t,e,r,e,t,i,t,i,r,e,r,i]}
//# sourceMappingURL=index.aa70ffc1.js.map
