{"mappings":"AAMgD,oBAAjBA,cAA+BA,aAC1CC,KAAKC,OAUZD,KAAKE,GAuBbF,KAAKG,QAAOH,KAAKG,MAAQ,eAC5B,IAAIC,EAAI,EACJC,EAAIC,UAAUC,OAEXF,KACLD,GAAKE,UAAUD,GAAKC,UAAUD,GAGhC,OAAOL,KAAKQ,KAAKJ,KCoIf,SAAIK,EAAwCC,EAACC,EAA7CC,GACA,MAAEC,EAASH,EAACI,aAAaH,GAGzBD,EAAAK,aAAAF,EAAAD,GAEAF,EAAAM,cAAYH,GAGZ,GAFYH,EAAGO,mBAAiBJ,EAAhCH,EAAAQ,gBAME,OAAIL,EAJN,CACA,MAAKM,EAAgBT,EAAGU,iBAAxBP,GAEE,MADAH,EAAAW,aAAWR,GACT,IAAES,MAAO,uCAAmCH,cCzK/CI,YACSb,EAAGC,EAAMa,EAASC,GAC5BC,KAAKhB,GAAKA,EACVgB,KAAKC,YAAc,QACnBD,KAAKE,UAAYjB,EAEjBe,KAAKG,kBAAoBH,KAAKhB,GAAGoB,kBAAkBN,EAASC,GAC5DC,KAAKK,YAAcL,KAAKhB,GAAGsB,eAU7BC,aAAaC,EAAMC,EAAWC,EAAQC,GACpCX,KAAKhB,GAAG4B,WAAWZ,KAAKhB,GAAG6B,aAAcb,KAAKK,aAE9CL,KAAKhB,GAAG8B,oBACNd,KAAKG,kBACLK,EACAR,KAAKE,UACLO,EACAC,EACAC,GAEFX,KAAKhB,GAAG+B,wBAAwBf,KAAKG,mBASvCa,QAAQC,EAAYC,GAGlB,IAAIC,EAEJ,GAJAnB,KAAKhB,GAAG4B,WAAWZ,KAAKhB,GAAG6B,aAAcb,KAAKK,aAG9Cc,EAASF,EACmB,iBAAlBA,EAAW,GAAgB,CACnCE,EAAS,IAAIC,MAAMH,EAAWpC,QAC9B,IAAI,IAAIF,EAAI,EAAGA,EAAEsC,EAAWpC,OAAQF,IAClCwC,EAAOxC,GAAKsC,EAAWtC,QACrB,GAAGyC,MAAMC,QAAQJ,GAAY,CACjCE,EAAS,IAAIC,MAAMH,EAAWpC,OAASoC,EAAW,GAAGpC,QACrD,IAAI,IAAIF,EAAI,EAAGA,EAAIsC,EAAWpC,OAAQF,IACpC,IAAI,IAAI2C,EAAI,EAAGA,EAAIL,EAAW,GAAGpC,OAAQyC,IACvCH,EAAOxC,EAAIsC,EAAW,GAAGpC,OAASyC,GAAKL,EAAWtC,GAAG2C,GAM3D,OAAOtB,KAAKE,WACV,KAAKF,KAAKhB,GAAGuC,MACXvB,KAAKhB,GAAGwC,WACNxB,KAAKhB,GAAG6B,aACR,IAAIxC,aAAa8C,GACjBD,GAEJ,MACA,KAAKlB,KAAKhB,GAAGyC,cACXzB,KAAKhB,GAAGwC,WACNxB,KAAKhB,GAAG6B,aACR,IAAIa,WAAWP,GACfD,IASRS,SACE3B,KAAKhB,GAAG4C,aAAa5B,KAAKK,kBCrF5B,MAAMwB,EFSN,SAAAC,EAAAC,EAAA,SAAAC,GAGF,MAAAC,EAAAC,SAAAC,eAAAL,GAO2C,IAAAG,EAAA,MAAA,IAAArC,MAAA,kFAAAkC,KAAe,MAAA,CAAC9C,GAANiD,EAAAG,WAAAL,EAAAC,GACnDC,OAAAA,GEpBeI,CAAc,aAEGrD,EAAA6C,EAAA7C,IF8DhC,SAAAiD,GAGF,MAAAK,EAAAL,EAAAM,YASQC,EAAaP,EAAAQ,aAGhBC,EAAaT,EAASU,QAAAL,GAAzBL,EAAAW,SAAAJ,EACGE,IAGAT,EAAAU,MAAYL,EAEfL,EAAAW,OAAoBJ,GE9EpBK,CAJAhB,EAAAI,QAKAjD,EAAA8D,SAAM,EAAO,EAAG9D,EAAAiD,OAAAU,MAAA3D,EAAAiD,OAAAW,QAGhB,MAAwBG,EAAAhE,EAAAC,EAAAA,EAAAgE,gTAClBC,EAAUlE,EAAaC,EAAGA,EAAEkE,+aAE/BpD,EFsHD,SAAAd,EAAAmE,EAAAC,GACA,MAAEtD,EAACd,EAAWqE,gBAchB,GAZFrE,EAAAsE,aAAAxD,EAAAqD,GAEAnE,EAAAsE,aAAAxD,EAAAsD,GAESpE,EAAAuE,YAAAzD,GAOPd,EAAAwE,oBAAA1D,EAAAd,EAAAyE,aAKA,OAAA3D,EAJc,CACZ,MAAI4D,EAAJ1E,EAAA2E,kBAAA7D,GAEA,MADAd,EAAG4E,cAAH9D,GACI,IAAIF,MAAR,wCAAA8D,MExIYG,CAAO7E,EAAA+D,EAAAE,GAGrBjE,EAAA8E,WAAMhE,GACD,MAACiE,EAAA,EACH,EAAC,EACF,EAAG,GACJ,EAED,GACOC,EAAA,EACJ,GAAE,EACH,EAAG,GACJ,EAED,GACOC,EAAI,EACT,IAAI,GACJ,GAAK,IACN,GAEG,IAEJ,IAAAC,EAAMH,EAEN,MAA8D9E,EAAAD,EAAAuC,MACI4C,EAAA,IAAAC,EAAApF,EAAAC,EAAAa,EAAA,iBAK/DuE,EAAArF,EAAAsF,oBAGHtF,EAAqDuF,gBAAAF,IAMnD,MAAM7D,EAAM,EAC0BC,GAAA,EAChCC,EAAS,EAEhBC,EAAA,EAE4EwD,EAAA5D,aAAAC,EAAAC,EAAAC,EAAAC,YAmBzC6D,KF3CpC,SAAAxF,EAAAyF,EAAA,CACA,GAEA,GACA,GAGA,IAGEzF,EAAA0F,WAAOD,EAAS,GAAAA,EAAhB,GAAAA,EAAA,GAAAA,EAAA,IACFzF,EAAA2F,WAAA,GAEA3F,EAAA4F,MAAO5F,EAAA6F,iBAAP7F,EAAA8F,kBACF9F,EAAA+F,OAAA/F,EAAAgG,YAEAhG,EAAAiG,UAAAjG,EAAAkG,QE4BIC,CAAqCnG,GAGrCmF,EAAMnD,QAAgBkD,EAAYlF,EAAAoG,aAElC,MAAMC,EAASrG,EAAAsG,UAIOtG,EAAAuG,WAAAF,EAHR,EACf,GAKanD,SAAAC,eAAgB,UAC5BqD,iBAAA,SAAS,KACVtB,EAAAH,EAEDS,OAEctC,SAAAC,eAAgB,UAC5BqD,iBAAA,SAAS,KACVtB,EAAAF,EAEDQ,OAEctC,SAAAC,eAAgB,UAC5BqD,iBAAA,SAAS,KACVtB,EAAAD,EACgBO,OAIjBA,IACD,MAAAiB","sources":["node_modules/gl-matrix/esm/common.js","node_modules/web-gl-helpers/dist/src/HelperFunctions.js","node_modules/web-gl-helpers/dist/src/ArrayBufferClass.js","main.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","/**\r\n * Created by Rick on 2022-01-11.\r\n */\r\n'use strict';\r\n\r\n/** @function createGLcontext\r\n * Create a WebGLRenderingContext from a canvas id.\r\n *\r\n * @param {string} canvas_id The html dom id for the canvas.\r\n * @param {string} context_type The context type. Acceptable values are '2d', 'webgl', 'webgl2', 'bitmaprenderer'.\r\n * @param {Object} options A set of options for the context. See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext}.\r\n * @returns {{gl: WebGLRenderingContext, canvas: HTMLElement}}\r\n */\r\nfunction createGLcontext(canvas_id, context_type='webgl2', options){\r\n  // One-time initialization of the scene.\r\n  const canvas = document.getElementById(canvas_id);\r\n  if(!canvas){\r\n    throw new Error(`HelperFunctions-createGLContext-Error: Could not locate canvas element with id ${canvas_id}`);\r\n  }\r\n  // Create a WebGLRenderingContext\r\n  const gl = canvas.getContext(context_type, options);\r\n\r\n  return {\r\n    gl: gl,\r\n    canvas: canvas\r\n  };\r\n}\r\n\r\n/** @function\r\n * Initialize the WebGLRenderingContext by clearing the canvas and giving by default a white background.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to be initialized.\r\n * @param {number[]} color_v4 A 4 element array where the first three values are the normalized RGB values for\r\n *   the canvas background. The fourth is the alpha value.\r\n */\r\nfunction initializeContext(gl, color_v4 = [0.9, 0.9, 0.9, 1]){\r\n  // Clear the canvas (red, gree, blue, alpha)\r\n  gl.clearColor(color_v4[0], color_v4[1], color_v4[2], color_v4[3]);  // clear to black, fully opaque\r\n  gl.clearDepth(1.0);  // clear everything\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n  gl.enable(gl.DEPTH_TEST);\r\n  gl.depthFunc(gl.LEQUAL);\r\n}\r\n\r\n/** @function\r\n * Check that the size of the canvas with the css values for width and height are the same.\r\n *\r\n * @param {HTMLElement} canvas The HTML canvas element whose size is to be checked.\r\n * @returns {boolean} Returns TRUE if the size was reassigned.\r\n */\r\nfunction resizeCanvasToDisplaySize(canvas){\r\n  // Lookup the size the browser is displaying the canvas in css pixels\r\n  const displayWidth = canvas.clientWidth;\r\n  const displayHeight = canvas.clientHeight;\r\n\r\n  // Check if the canvas is not the same size\r\n  const needResize = canvas.width !== displayWidth ||\r\n    canvas.height !== displayHeight;\r\n\r\n  if(needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n\r\n  return needResize;\r\n}\r\n\r\n/**\r\n * // Given a canvas element, expand it to the size of the window\r\n // and ensure that it automatically resizes as the window changes\r\n * @param {HTMLElement} canvas The HTML canvas element whose size is to be resized.\r\n */\r\nfunction autoResizeCanvas(canvas){\r\n  const expandFullScreen = () => {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n  };\r\n  expandFullScreen();\r\n  // Resize screen when the browser has triggered the resize event\r\n  window.addEventListener('resize', expandFullScreen);\r\n}\r\n\r\n/** @function\r\n * Create a complete rendering program {WebGLProgram}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas.\r\n * @param {WebGLShader} vertex_shader The program's vertex shader.\r\n * @param {WebGLShader} frag_shader The program's fragment shader.\r\n * @returns {WebGLProgram}\r\n */\r\nfunction createProgram(gl, vertex_shader, frag_shader){\r\n  const program = gl.createProgram();\r\n\r\n  // Attach the shader objects\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, frag_shader);\r\n\r\n  // Link the WebGLProgram object\r\n  gl.linkProgram(program);\r\n\r\n  // Check for success\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n  if(!success) {\r\n    const program_info = gl.getProgramInfoLog(program);\r\n    gl.deleteProgram(program);\r\n    throw new Error(`HelperFunctions-createProgram-Error: ${program_info}`);\r\n  }else {\r\n    return program;\r\n  }\r\n}\r\n\r\n/** @function\r\n * Creates a shader object {WebGLShader} given\r\n *   the source code. See [WebGLShader]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas\r\n * @param {number} type The type of shader, either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER.\r\n * @param {string} source The code/text of the shader.\r\n * @returns {WebGLShader}\r\n */\r\nfunction createShader(gl, type, source){\r\n  const shader = gl.createShader(type);\r\n  // Put the source code into the gl shader object\r\n  gl.shaderSource(shader, source);\r\n  // Compile the shader code\r\n  gl.compileShader(shader);\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n  if(!success){\r\n    const shader_info = gl.getShaderInfoLog(shader);\r\n    gl.deleteShader(shader);\r\n    throw new Error(`HelperFunctions-createShader-Error: ${shader_info}`);\r\n  }else {\r\n    return shader;\r\n  }\r\n}\r\n\r\n/**\r\n * Clean the Vertex Array Object(vbo) buffer, the\r\n *   vertex buffer, and the element array buffer.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas\r\n */\r\nfunction cleanBuffers(gl){\r\n  if(gl !== undefined){\r\n    gl.bindVertexArray(null);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n  }\r\n}\r\n\r\n// Returns computed normals for provided vertices.\r\n// Note: Indices have to be completely defined--NO TRIANGLE_STRIP only TRIANGLES.\r\nfunction calculateNormals(vs, ind) {\r\n  const\r\n    x = 0,\r\n    y = 1,\r\n    z = 2,\r\n    ns = [];\r\n\r\n  // For each vertex, initialize normal x, normal y, normal z\r\n  for (let i = 0; i < vs.length; i += 3) {\r\n    ns[i + x] = 0.0;\r\n    ns[i + y] = 0.0;\r\n    ns[i + z] = 0.0;\r\n  }\r\n\r\n  // We work on triads of vertices to calculate\r\n  for (let i = 0; i < ind.length; i += 3) {\r\n    // Normals so i = i+3 (i = indices index)\r\n    const v1 = [], v2 = [], normal = [];\r\n\r\n    // p2 - p1\r\n    v1[x] = vs[3 * ind[i + 2] + x] - vs[3 * ind[i + 1] + x];\r\n    v1[y] = vs[3 * ind[i + 2] + y] - vs[3 * ind[i + 1] + y];\r\n    v1[z] = vs[3 * ind[i + 2] + z] - vs[3 * ind[i + 1] + z];\r\n\r\n    // p0 - p1\r\n    v2[x] = vs[3 * ind[i] + x] - vs[3 * ind[i + 1] + x];\r\n    v2[y] = vs[3 * ind[i] + y] - vs[3 * ind[i + 1] + y];\r\n    v2[z] = vs[3 * ind[i] + z] - vs[3 * ind[i + 1] + z];\r\n\r\n    // Cross product by Sarrus Rule\r\n    normal[x] = v1[y] * v2[z] - v1[z] * v2[y];\r\n    normal[y] = v1[z] * v2[x] - v1[x] * v2[z];\r\n    normal[z] = v1[x] * v2[y] - v1[y] * v2[x];\r\n\r\n    // Update the normals of that triangle: sum of vectors\r\n    for (let j = 0; j < 3; j++) {\r\n      ns[3 * ind[i + j] + x] = ns[3 * ind[i + j] + x] + normal[x];\r\n      ns[3 * ind[i + j] + y] = ns[3 * ind[i + j] + y] + normal[y];\r\n      ns[3 * ind[i + j] + z] = ns[3 * ind[i + j] + z] + normal[z];\r\n    }\r\n  }\r\n\r\n  // Normalize the result.\r\n  // The increment here is because each vertex occurs.\r\n  for (let i = 0; i < vs.length; i += 3) {\r\n    // With an offset of 3 in the array (due to x, y, z contiguous values)\r\n    const nn = [];\r\n    nn[x] = ns[i + x];\r\n    nn[y] = ns[i + y];\r\n    nn[z] = ns[i + z];\r\n\r\n    let len = Math.sqrt((nn[x] * nn[x]) + (nn[y] * nn[y]) + (nn[z] * nn[z]));\r\n    if (len === 0) len = 1.0;\r\n\r\n    nn[x] = nn[x] / len;\r\n    nn[y] = nn[y] / len;\r\n    nn[z] = nn[z] / len;\r\n\r\n    ns[i + x] = nn[x];\r\n    ns[i + y] = nn[y];\r\n    ns[i + z] = nn[z];\r\n  }\r\n\r\n  return ns;\r\n}\r\n\r\n/**\r\n * Convert hex string color to rgb array\r\n *\r\n * @param hex_str A hex string in form '#_____'\r\n * @returns {number[]} An 3 element array of integers for RGB color\r\n */\r\nfunction hexToRGB(hex_str) {\r\n  const hex = parseInt(hex_str.replace(/^#/, ''), 16);\r\n  const red = (hex >> 16) & 0xFF;\r\n  const green = (hex >> 8) & 0xFF;\r\n  const blue = hex & 0xFF;\r\n  return [red, green, blue];\r\n}\r\n\r\n/**\r\n * Convert rgb array to hex string\r\n *\r\n * @param {number[]} rgb A integer array for RGB color\r\n * @returns {string} A hex string of the RGB color\r\n */\r\nfunction rgbToHex(rgb){\r\n  const red = rgb[0] << 16;\r\n  const green = rgb[1] << 8;\r\n  const blue = rgb[2];\r\n\r\n  return \"#\" + ((1 << 24) + red + green + blue).toString(16).slice(1,7);\r\n}\r\n\r\n/**\r\n * De-normalize colors from 0-1 to 0-255\r\n *\r\n * @param {number[]} color A normalized color array with values from 0-1\r\n * @returns {number[]} An integer color array with values from 0-255\r\n */\r\nfunction denormalizeColor(color) {\r\n  return color.map((c) => c * 255);\r\n}\r\n\r\n// Normalize colors from 0-255 to 0-1\r\n/**\r\n *\r\n * @param color An integer RGB color array with values from 0-255\r\n * @returns {number[]} A normalized RGB color array with values from 0-1\r\n */\r\nfunction normalizeColor(color) {\r\n  return color.map((c) => c / 255);\r\n}\r\n\r\nexport{\r\n  createGLcontext,\r\n  initializeContext,\r\n  resizeCanvasToDisplaySize,\r\n  autoResizeCanvas,\r\n  createProgram,\r\n  createShader,\r\n  cleanBuffers,\r\n  calculateNormals,\r\n  hexToRGB,\r\n  rgbToHex,\r\n  denormalizeColor,\r\n  normalizeColor\r\n}","/**\n * Created by Rick on 2021-12-11.\n */\n'use strict';\n\n/**\n * ArrayBufferClass provides functions for working with a vertex shader's attribute variables.\n *   The class establishes an array buffer for sending vertex attributes, such as vertex coordinates,\n *   texture coordinate data, or vertex color data through the graphics hardware pipeline.\n *   See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) for a\n *     description of data buffers.\n *   See [WebGL Fundamentals](https://webgl2fundamentals.org/webgl/lessons/webgl-fundamentals.html) for\n *     an explanation on data buffers.\n *\n */\nexport default class ArrayBufferClass {\n  /**\n   * Create an AttributeClass instance\n   * @param {WebGLRenderingContext} gl The WebGL context\n   * @param {number} type  Specifying the [data type]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer}\n   *   of each element in the array.\n   * @param {WebGLProgram} program The WebGL program.\n   * @param {string} name The name of the attribute variable used in the vertex shader code.\n   */\n  constructor(gl,type, program, name) {\n    this.gl = gl;\n    this.buffer_type = 'ARRAY';\n    this.data_type = type;\n    // Look up where the attribute needs to go\n    this.attributeLocation = this.gl.getAttribLocation(program, name);\n    this.arrayBuffer = this.gl.createBuffer();\n  }\n\n  /**\n   * Describes how the attribute is read from the buffer pipeline.\n   * @param {number} size  The number of components per vertex attribute. Must be 1, 2, 3, or 4.\n   * @param {boolean} normalize Specifying whether integer data values should be normalized.\n   * @param {number} stride Specifying the offset in bytes between the beginning of consecutive vertex attributes.\n   * @param {number} offset Specifying an offset in bytes of the first component in the vertex attribute array.\n   */\n  bufferFormat(size, normalize, stride, offset) {\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.arrayBuffer);\n    // Tell the attribute how to get data out of the internal ARRAY_BUFFER\n    this.gl.vertexAttribPointer(\n      this.attributeLocation,\n      size,\n      this.data_type,\n      normalize,\n      stride,\n      offset\n    );\n    this.gl.enableVertexAttribArray(this.attributeLocation);\n  }\n\n  /**\n   * Initializes and creates the buffer object's data store.\n   * @param {Array} attributes Array containing\n   *   vertex attributes, such as vertex coordinates, texture coordinate data, or vertex color data.\n   * @param {number} usage Specifies the intended [usage pattern]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData} of the data store for optimization purposes.\n   */\n  setData(attributes, usage){\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.arrayBuffer);\n    // Check if we need to flatten 'attributes'\n    let values;\n    values = attributes;\n    if(typeof(attributes[0]) == 'number'){\n      values = new Array(attributes.length);\n      for(let i = 0; i<attributes.length; i++)\n        values[i] = attributes[i];\n    }else if(Array.isArray(attributes)){\n      values = new Array(attributes.length * attributes[0].length);\n      for(let i = 0; i < attributes.length; i++) {\n        for(let j = 0; j < attributes[0].length; j++){\n          values[i * attributes[0].length + j] = attributes[i][j];\n        }\n      }\n    }\n\n    // Set geometry\n    switch(this.data_type){\n      case this.gl.FLOAT:\n        this.gl.bufferData(\n          this.gl.ARRAY_BUFFER,\n          new Float32Array(values),\n          usage\n        );\n      break;\n      case this.gl.UNSIGNED_BYTE:\n        this.gl.bufferData(\n          this.gl.ARRAY_BUFFER,\n          new Uint8Array(values),\n          usage\n        );\n        break;\n    }\n  }\n\n  /**\n   * Delete this classes array buffer instance\n   */\n  delete(){\n    this.gl.deleteBuffer(this.arrayBuffer);\n  }\n}","/**\r\n * Created by Rick on 2021-12-10.\r\n */\r\n'use strict';\r\n\r\nimport {vertex_shader, fragment_shader} from \"./shaders.js\";\r\nimport {ArrayBufferClass} from \"web-gl-helpers\";\r\nimport {resizeCanvasToDisplaySize} from \"web-gl-helpers\"\r\nimport {createShader} from \"web-gl-helpers\";\r\nimport {createGLcontext} from \"web-gl-helpers\";\r\nimport {createProgram} from \"web-gl-helpers\";\r\nimport {initializeContext} from \"web-gl-helpers\";\r\n\r\ntry {\r\n  const context = createGLcontext('my_canvas');\r\n  const gl = context.gl;\r\n  const canvas = context.canvas;\r\n\r\n  // Check canvas width and height\r\n  resizeCanvasToDisplaySize(canvas);\r\n\r\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n  // Create shader objects\r\n  const vShader = createShader(gl, gl.VERTEX_SHADER, vertex_shader);\r\n  const fShader = createShader(gl, gl.FRAGMENT_SHADER, fragment_shader);\r\n\r\n  // Create a WebGLProgram\r\n  const program = createProgram(gl, vShader, fShader);\r\n  // Tell it to use our program (a pair of shaders)\r\n  gl.useProgram(program);\r\n\r\n  // Set up triangle position attribute buffer and set data\r\n  const positions_corner = [\r\n    -1,0,\r\n    0,1,\r\n    -1,1\r\n  ]\r\n\r\n  const positions_bigger = [\r\n    -1,-1,\r\n    1,1,\r\n    -1,1\r\n  ]\r\n\r\n  const positions_center = [\r\n    -0.5,-0.5,\r\n    0.5,0.5,\r\n    -0.5,0.5\r\n  ]\r\n\r\n  let positions = positions_corner;\r\n  const type = gl.FLOAT; // the data is 32bit floats\r\n  const positionAttrib = new ArrayBufferClass(gl, type, program, 'a_position_v4');\r\n\r\n  // Associate shader attributes with corresponding data buffers\r\n  // Create a connection manager for the data, a Vertex Array Object\r\n  // These are typically made global so you can swap what you draw in\r\n  //   the render function.\r\n  const vao = gl.createVertexArray();\r\n  // Make vao the one we're currently working with\r\n  gl.bindVertexArray(vao);\r\n\r\n  // Turn on the attribute\r\n  // Specify how to pull the data out and bind the data\r\n  //  to the internal WebGL internal array buffer ARRAY_BUFFER\r\n  // Note that in our vertex shader we specified an attribute a_position as vec4\r\n  {\r\n    const size = 2; // 2 components per iteration\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0; // 0 = move forward size * sizeof(type) each\r\n    //  iteration to get the next position\r\n    const offset = 0; // start at the beginning of the buffer\r\n    positionAttrib.bufferFormat(size, normalize, stride, offset);\r\n  }\r\n\r\n  // Because the count is 3 this will execute our vertex shader 3 times -- once\r\n  //    for each of the a_position points.\r\n  // Because we set primitiveType to gl.TRIANGLES, each time our vertex shader is\r\n  //    run 3 times WeBGL will draw a triangle based on the 3 values we set gl_Position to.\r\n  //    Note that those values are the clip space coordinates that go from -1 to 1.\r\n\r\n  // The translation from clip space to screen space (from our viewport specification of\r\n  //   canvas width(400) and height(300):\r\n  //         clip space         screen space\r\n  //            0,0      ->        200, 150\r\n  //            0,0.5    ->        200, 225\r\n  //            0.7,0    ->        340, 150\r\n  // Clip space conversion for width: (clip) * (400/2) + 200\r\n  // Clip space conversion for height: (clip) * (300/2) + 150\r\n  // Note that the drawing starts at the center of the screen (200, 150)\r\n\r\n  function drawScene() {\r\n    initializeContext(gl);\r\n\r\n    // Set the attribute position data\r\n    positionAttrib.setData(positions, gl.STATIC_DRAW);\r\n\r\n    // Ask WebGL to execute the GLSL program\r\n    const primitiveType = gl.TRIANGLES;\r\n    const prim_offset = 0;\r\n    const count = 3;\r\n    gl.drawArrays(primitiveType, prim_offset, count);\r\n  }\r\n\r\n  // Set up user interface\r\n  const corner_radio = document.getElementById('corner');\r\n  corner_radio.addEventListener('click', () => {\r\n    positions = positions_corner;\r\n    drawScene();\r\n  })\r\n\r\n  const bigger_radio = document.getElementById('bigger');\r\n  bigger_radio.addEventListener('click', () => {\r\n    positions = positions_bigger;\r\n    drawScene();\r\n  })\r\n\r\n  const center_radio = document.getElementById('center');\r\n  center_radio.addEventListener('click', () => {\r\n    positions = positions_center;\r\n    drawScene();\r\n  })\r\n  // Draw the scene\r\n  drawScene();\r\n\r\n}catch (e) {\r\n  console.log(e);\r\n}"],"names":["Float32Array","Math","random","PI","hypot","y","i","arguments","length","sqrt","$f8517097745e6edf$export$1750aa77609e1fb","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shader_info","getShaderInfoLog","deleteShader","Error","constructor","program","name","this","buffer_type","data_type","attributeLocation","getAttribLocation","arrayBuffer","createBuffer","bufferFormat","size","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","enableVertexAttribArray","setData","attributes","usage","values","Array","isArray","j","FLOAT","bufferData","UNSIGNED_BYTE","Uint8Array","delete","deleteBuffer","context","canvas_id","context_type","options","canvas","document","getElementById","getContext","$f8517097745e6edf$export$904a8156d3f18680","displayWidth","clientWidth","displayHeight","clientHeight","needResize","width","height","$f8517097745e6edf$export$4d986a341d0b1b6c","viewport","vShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","vertex_shader","frag_shader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","program_info","getProgramInfoLog","deleteProgram","$f8517097745e6edf$export$327d24a04cd0dc17","useProgram","positions_corner","positions_bigger","positions_center","positions","positionAttrib","$f8517097745e6edf$export$295f27c869b9e2d8","vao","createVertexArray","bindVertexArray","$efd3ba4ec2608b1d$var$drawScene","color_v4","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","DEPTH_TEST","depthFunc","LEQUAL","$f8517097745e6edf$export$881f7fb71351b304","STATIC_DRAW","primitiveType","TRIANGLES","drawArrays","addEventListener","e"],"version":3,"file":"index.d7a73f96.js.map"}