{"mappings":"AAMgD,oBAAjBA,cAA+BA,aAC1CC,KAAKC,OAUZD,KAAKE,GAuBbF,KAAKG,QAAOH,KAAKG,MAAQ,eAC5B,IAAIC,EAAI,EACJC,EAAIC,UAAUC,OAEXF,KACLD,GAAKE,UAAUD,GAAKC,UAAUD,GAGhC,OAAOL,KAAKQ,KAAKJ,WCzBfK,EAgBAC,YAAAC,EAAAC,EAAAC,EAAAC,GACAC,KAAKJ,GAAGA,EAQRI,KAAKH,KAAGA,EAGVG,KAAAC,kBAAAD,KAAAJ,GAAAM,kBAAAJ,EAAAC,GAMEC,KAAKG,OAAGH,KAAWJ,GAAAQ,eAgBfC,aAAAC,EAAAC,EAAAC,EAAAC,8pBCzDN,MAAMC,ECSN,SAAAC,EAAAC,EAAA,SAAAC,GAGF,MAAAC,EAAAC,SAAAC,eAAAL,GAO2C,IAAAG,EAAA,MAAA,IAAAG,MAAA,4DAAAN,KAAY,MAAA,CAAGf,GAAPkB,EAAAI,WAAAN,EAAAC,GACjDC,OAAAA,GDpBeK,CAAc,aAEGvB,EAAAc,EAAAd,ICoEhC,SAAAkB,GAGA,MAAIM,EAAJN,EAAAO,YACEC,EAAkBR,EAAMS,aAExBC,EAAeV,EAAkBW,QAAAL,GAAeN,EAAhDY,SAAAJ,EACDE,IAKHV,EAAAW,MAAAL,EAUEN,EAAMY,OAAYJ,GDrFlBK,CAJAjB,EAAAI,QAKAlB,EAAAgC,SAAM,EAAO,EAAGhC,EAAAkB,OAAAW,MAAA7B,EAAAkB,OAAAY,QAGhB,MAAwBG,EAAAC,EAAAlC,EAAAA,EAAAmC,gTAClBC,EAAUF,EAAalC,EAAGA,EAAEqC,+aAE/BnC,EC4FL,SAAAF,EAAAsC,EAAAC,kOD5FgBC,CAAOxC,EAAAiC,EAAAG,GAGrBpC,EAAAyC,WAAMvC,GACD,MAACwC,EAAA,EACH,EAAC,EACF,EAAG,GACJ,EAED,GACOC,EAAA,EACJ,GAAE,EACH,EAAG,GACJ,EAED,GACOC,EAAI,EACT,IAAI,GACJ,GAAK,IACN,GAEG,IAEJ,IAAAC,EAAMH,EAEN,MAA8DzC,EAAAD,EAAA8C,MACIC,EAAA,IAAAjD,EAAAE,EAAAC,EAAAC,EAAA,iBAK/D8C,EAAAhD,EAAAiD,oBAGHjD,EAAqDkD,gBAAAF,IAMnD,MAAMtC,EAAM,EAC0BC,GAAA,EAChCC,EAAS,EAEhBC,EAAA,EAE4EkC,EAAAtC,aAAAC,EAAAC,EAAAC,EAAAC,YAmBzCsC,KC3CpC,SAAAnD,EAAAoD,EAAA,CACA,EAEA,EACA,EAGA,IAGEpD,EAAAqD,OAAMrD,EAACsD,OACTtD,EAAAuD,UAAAvD,EAAAwD,UAAAxD,EAAAyD,qBAEAzD,EAAA0D,WAAON,EAAP,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACFpD,EAAA2D,WAAA,GAEA3D,EAAA4D,MAAA5D,EAAA6D,iBAAA7D,EAAA8D,kBD4BIC,CAAqC/D,GAGrC+C,EAAMiB,QAAgBnB,EAAY7C,EAAAiE,aAElC,MAAMC,EAASlE,EAAAmE,UAIOnE,EAAAoE,WAAAF,EAHR,EACf,GAKa/C,SAAAC,eAAgB,UAC5BiD,iBAAA,SAAS,KACVxB,EAAAH,EAEDS,OAEchC,SAAAC,eAAgB,UAC5BiD,iBAAA,SAAS,KACVxB,EAAAF,EAEDQ,OAEchC,SAAAC,eAAgB,UAC5BiD,iBAAA,SAAS,KACVxB,EAAAD,EACgBO,OAIjBA,IACD,MAAAmB","sources":["node_modules/gl-matrix/esm/common.js","node_modules/web-gl-helpers/dist/src/AttributeClass.js","1_fundamentals/triangle/a.usingclipspace/main.js","node_modules/web-gl-helpers/dist/src/HelperFunctions.js"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","/**\r\n * Created by Rick on 2021-12-11.\r\n */\r\n'use strict';\r\n\r\n/**\r\n * AttributeClass provides functions for working with a WebGLProgram's attribute variable.\r\n *   The class establishes a data buffer for sending vertex attributes, such as vertex coordinates,\r\n *   texture coordinate data, or vertex color data through the graphics hardware pipeline.\r\n *   See [WebGL Fundamentals](https://webgl2fundamentals.org/webgl/lessons/webgl-fundamentals.html) for\r\n *   an explanation on data buffers.\r\n *\r\n */\r\nexport default class AttributeClass {\r\n  /**\r\n   * Create an AttributeClass instance\r\n   * @param {WebGLRenderingContext} gl The WebGL context\r\n   * @param {number} type  Specifying the [data type]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer}\r\n   *   of each component in the array.\r\n   * @param {WebGLProgram} program The WebGL program.\r\n   * @param {string} name The name of the attribute variable.\r\n   */\r\n  constructor(gl, type, program, name) {\r\n    this.gl = gl;\r\n    this.type = type;\r\n    // Look up where the attribute needs to go\r\n    this.attributeLocation = this.gl.getAttribLocation(program, name);\r\n    this.buffer = this.gl.createBuffer();\r\n  }\r\n\r\n  /**\r\n   * Describes how the attribute is read from the buffer pipeline.\r\n   * @param {number} size  The number of components per vertex attribute. Must be 1, 2, 3, or 4.\r\n   * @param {boolean} normalize Specifying whether integer data values should be normalized.\r\n   * @param {number} stride Specifying the offset in bytes between the beginning of consecutive vertex attributes.\r\n   * @param {number} offset Specifying an offset in bytes of the first component in the vertex attribute array.\r\n   */\r\n  bufferFormat(size, normalize, stride, offset) {\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Tell the attribute how to get data out of the internal ARRAY_BUFFER\r\n    this.gl.vertexAttribPointer(\r\n      this.attributeLocation,\r\n      size,\r\n      this.type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    this.gl.enableVertexAttribArray(this.attributeLocation);\r\n  }\r\n\r\n  /**\r\n   * Initializes and creates the buffer object's data store.\r\n   * @param {number[]} attribute_list Array containing vertex attributes, such as vertex coordinates, texture coordinate data, or vertex color data.\r\n   * @param {number} usage Specifies the intended [usage pattern]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData} of the data store for optimization purposes.\r\n   */\r\n  setData(attribute_list, usage){\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n    // Set geometry\r\n    switch(this.type){\r\n      case this.gl.FLOAT:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Float32Array(attribute_list),\r\n          usage\r\n        );\r\n      break;\r\n      case this.gl.UNSIGNED_BYTE:\r\n        this.gl.bufferData(\r\n          this.gl.ARRAY_BUFFER,\r\n          new Uint8Array(attribute_list),\r\n          usage\r\n        );\r\n        break;\r\n    }\r\n  }\r\n}","/**\r\n * Created by Rick on 2021-12-10.\r\n */\r\n'use strict';\r\n\r\nimport {vertex_shader, fragment_shader} from \"./shaders.js\";\r\nimport {AttributeClass} from \"web-gl-helpers\";\r\nimport {resizeCanvasToDisplaySize} from \"web-gl-helpers\"\r\nimport {createShader} from \"web-gl-helpers\";\r\nimport {createGLcontext} from \"web-gl-helpers\";\r\nimport {createProgram} from \"web-gl-helpers\";\r\nimport {initializeContext} from \"web-gl-helpers\";\r\n\r\ntry {\r\n  const context = createGLcontext('my_canvas');\r\n  const gl = context.gl;\r\n  const canvas = context.canvas;\r\n\r\n  // Check canvas width and height\r\n  resizeCanvasToDisplaySize(canvas);\r\n\r\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n  // Create shader objects\r\n  const vShader = createShader(gl, gl.VERTEX_SHADER, vertex_shader);\r\n  const fShader = createShader(gl, gl.FRAGMENT_SHADER, fragment_shader);\r\n\r\n  // Create a WebGLProgram\r\n  const program = createProgram(gl, vShader, fShader);\r\n  // Tell it to use our program (a pair of shaders)\r\n  gl.useProgram(program);\r\n\r\n  // Set up triangle position attribute buffer and set data\r\n  const positions_corner = [\r\n    -1,0,\r\n    0,1,\r\n    -1,1\r\n  ]\r\n\r\n  const positions_bigger = [\r\n    -1,-1,\r\n    1,1,\r\n    -1,1\r\n  ]\r\n\r\n  const positions_center = [\r\n    -0.5,-0.5,\r\n    0.5,0.5,\r\n    -0.5,0.5\r\n  ]\r\n\r\n  let positions = positions_corner;\r\n  const type = gl.FLOAT; // the data is 32bit floats\r\n  const positionAttrib = new AttributeClass(gl, type, program, 'a_position_v4');\r\n\r\n  // Associate shader attributes with corresponding data buffers\r\n  // Create a connection manager for the data, a Vertex Array Object\r\n  // These are typically made global so you can swap what you draw in\r\n  //   the render function.\r\n  const vao = gl.createVertexArray();\r\n  // Make vao the one we're currently working with\r\n  gl.bindVertexArray(vao);\r\n\r\n  // Turn on the attribute\r\n  // Specify how to pull the data out and bind the data\r\n  //  to the internal WebGL internal array buffer ARRAY_BUFFER\r\n  // Note that in our vertex shader we specified an attribute a_position as vec4\r\n  {\r\n    const size = 2; // 2 components per iteration\r\n    const normalize = false; // don't normalize the data\r\n    const stride = 0; // 0 = move forward size * sizeof(type) each\r\n    //  iteration to get the next position\r\n    const offset = 0; // start at the beginning of the buffer\r\n    positionAttrib.bufferFormat(size, normalize, stride, offset);\r\n  }\r\n\r\n  // Because the count is 3 this will execute our vertex shader 3 times -- once\r\n  //    for each of the a_position points.\r\n  // Because we set primitiveType to gl.TRIANGLES, each time our vertex shader is\r\n  //    run 3 times WeBGL will draw a triangle based on the 3 values we set gl_Position to.\r\n  //    Note that those values are the clip space coordinates that go from -1 to 1.\r\n\r\n  // The translation from clip space to screen space (from our viewport specification of\r\n  //   canvas width(400) and height(300):\r\n  //         clip space         screen space\r\n  //            0,0      ->        200, 150\r\n  //            0,0.5    ->        200, 225\r\n  //            0.7,0    ->        340, 150\r\n  // Clip space conversion for width: (clip) * (400/2) + 200\r\n  // Clip space conversion for height: (clip) * (300/2) + 150\r\n  // Note that the drawing starts at the center of the screen (200, 150)\r\n\r\n  function drawScene() {\r\n    initializeContext(gl);\r\n\r\n    // Set the attribute position data\r\n    positionAttrib.setData(positions, gl.STATIC_DRAW);\r\n\r\n    // Ask WebGL to execute the GLSL program\r\n    const primitiveType = gl.TRIANGLES;\r\n    const prim_offset = 0;\r\n    const count = 3;\r\n    gl.drawArrays(primitiveType, prim_offset, count);\r\n  }\r\n\r\n  // Set up user interface\r\n  const corner_radio = document.getElementById('corner');\r\n  corner_radio.addEventListener('click', () => {\r\n    positions = positions_corner;\r\n    drawScene();\r\n  })\r\n\r\n  const bigger_radio = document.getElementById('bigger');\r\n  bigger_radio.addEventListener('click', () => {\r\n    positions = positions_bigger;\r\n    drawScene();\r\n  })\r\n\r\n  const center_radio = document.getElementById('center');\r\n  center_radio.addEventListener('click', () => {\r\n    positions = positions_center;\r\n    drawScene();\r\n  })\r\n  // Draw the scene\r\n  drawScene();\r\n\r\n}catch (e) {\r\n  console.log(e);\r\n}","/**\r\n * Created by Rick on 2022-01-11.\r\n */\r\n'use strict';\r\n\r\n/** @function createGLcontext\r\n * Create a WebGLRenderingContext from a canvas id.\r\n *\r\n * @param {string} canvas_id The html dom id for the canvas.\r\n * @param {string} context_type The context type. Acceptable values are '2d', 'webgl', 'webgl2', 'bitmaprenderer'.\r\n * @param {Object} options A set of options for the context. See {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext}.\r\n * @returns {{gl: WebGLRenderingContext, canvas: HTMLElement}}\r\n */\r\nfunction createGLcontext(canvas_id, context_type='webgl2', options){\r\n  // One-time initialization of the scene.\r\n  const canvas = document.getElementById(canvas_id);\r\n  if(!canvas){\r\n    throw new Error(`createGLContext: Could not locate canvas element with id ${canvas_id}`);\r\n  }\r\n  // Create a WebGLRenderingContext\r\n  const gl = canvas.getContext(context_type, options);\r\n\r\n  return {\r\n    gl: gl,\r\n    canvas: canvas\r\n  };\r\n}\r\n\r\n/** @function\r\n * Initialize the WebGLRenderingContext by clearing the canvas and giving by default a black background.\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to be initialized.\r\n * @param {number[]} color_v4 A 4 element vector where the first three values are the RGB values for\r\n *   the canvas background. The fourth is the alpha value.\r\n */\r\nfunction initializeContext(gl, color_v4 = [0.0,0.0,0.0,1.0]){\r\n  // Clear the canvas (red, gree, blue, alpha)\r\n  gl.enable(gl.BLEND);\r\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n  gl.clearColor(color_v4[0], color_v4[1], color_v4[2], color_v4[3]);  // clear to black, fully opaque\r\n  gl.clearDepth(1.0);  // clear everything\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\n/** @function\r\n * Check that the size of the canvas with the css values for width and height are the same.\r\n *\r\n * @param {HTMLElement} canvas The HTML canvas element whose size is to be checked.\r\n * @returns {boolean} Returns TRUE if the size was reassigned.\r\n */\r\nfunction resizeCanvasToDisplaySize(canvas){\r\n  // Lookup the size the browser is displaying the canvas in css pixels\r\n  const displayWidth = canvas.clientWidth;\r\n  const displayHeight = canvas.clientHeight;\r\n\r\n  // Check if the canvas is not the same size\r\n  const needResize = canvas.width !== displayWidth ||\r\n    canvas.height !== displayHeight;\r\n\r\n  if(needResize) {\r\n    // Make the canvas the same size\r\n    canvas.width = displayWidth;\r\n    canvas.height = displayHeight;\r\n  }\r\n\r\n  return needResize;\r\n}\r\n\r\n/** @function\r\n * Create a complete rendering program {WebGLProgram}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas.\r\n * @param {WebGLShader} vertex_shader The program's vertex shader.\r\n * @param {WebGLShader} frag_shader The program's fragment shader.\r\n * @returns {WebGLProgram}\r\n */\r\nfunction createProgram(gl, vertex_shader, frag_shader){\r\n  const program = gl.createProgram();\r\n\r\n  // Attach the shader objects\r\n  gl.attachShader(program, vertex_shader);\r\n  gl.attachShader(program, frag_shader);\r\n\r\n  // Link the WebGLProgram object\r\n  gl.linkProgram(program);\r\n\r\n  // Check for success\r\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n\r\n  if(!success) {\r\n    const program_info = gl.getProgramInfoLog(program);\r\n    gl.deleteProgram(program);\r\n    throw new Error('createProgram: ' + program_info);\r\n  }else {\r\n    return program;\r\n  }\r\n}\r\n\r\n/** @function\r\n * Creates a shader object {WebGLShader} given\r\n *   the source code. See [WebGLShader]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebGLShader}\r\n *\r\n * @param {WebGLRenderingContext} gl The WebGL context from the canvas\r\n * @param {number} type The type of shader, either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER.\r\n * @param {string} source The code/text of the shader.\r\n * @returns {WebGLShader}\r\n */\r\nfunction createShader(gl, type, source){\r\n  const shader = gl.createShader(type);\r\n  // Put the source code into the gl shader object\r\n  gl.shaderSource(shader, source);\r\n  // Compile the shader code\r\n  gl.compileShader(shader);\r\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n\r\n  if(!success){\r\n    const shader_info = gl.getShaderInfoLog(shader);\r\n    gl.deleteShader(shader);\r\n    throw new Error('createShader: ' + shader_info);\r\n  }else {\r\n    return shader;\r\n  }\r\n}\r\n\r\nexport{\r\n  createGLcontext,\r\n  initializeContext,\r\n  resizeCanvasToDisplaySize,\r\n  createProgram,\r\n  createShader\r\n}"],"names":["Float32Array","Math","random","PI","hypot","y","i","arguments","length","sqrt","$3df84b0b96c9c096$export$be1b00860175ea1f","constructor","gl","type","program","name","this","attributeLocation","getAttribLocation","buffer","createBuffer","bufferFormat","size","normalize","stride","offset","context","canvas_id","context_type","options","canvas","document","getElementById","Error","getContext","$3df84b0b96c9c096$export$904a8156d3f18680","displayWidth","clientWidth","displayHeight","clientHeight","needResize","width","height","$3df84b0b96c9c096$export$4d986a341d0b1b6c","viewport","vShader","$3df84b0b96c9c096$export$1750aa77609e1fb","VERTEX_SHADER","fShader","FRAGMENT_SHADER","vertex_shader","frag_shader","$3df84b0b96c9c096$export$327d24a04cd0dc17","useProgram","positions_corner","positions_bigger","positions_center","positions","FLOAT","positionAttrib","vao","createVertexArray","bindVertexArray","$bb5e16c1e90dfa14$var$drawScene","color_v4","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","clearColor","clearDepth","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","$3df84b0b96c9c096$export$881f7fb71351b304","setData","STATIC_DRAW","primitiveType","TRIANGLES","drawArrays","addEventListener","e"],"version":3,"file":"index.dcb82e97.js.map"}