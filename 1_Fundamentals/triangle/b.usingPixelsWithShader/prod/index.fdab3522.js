"undefined"!=typeof Float32Array&&Float32Array,Math.random;Math.PI;Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});class t{constructor(t,e,n,o){this.gl=t,this.type=e,this.attributeLocation=this.gl.getAttribLocation(n,o),this.buffer=this.gl.createBuffer()}bufferFormat(t,e,n,o){this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.gl.vertexAttribPointer(this.attributeLocation,t,this.type,e,n,o),this.gl.enableVertexAttribArray(this.attributeLocation)}setData(t,e){switch(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.buffer),this.type){case this.gl.FLOAT:this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),e);break;case this.gl.UNSIGNED_BYTE:this.gl.bufferData(this.gl.ARRAY_BUFFER,new Uint8Array(t),e)}}}class e{constructor(t,e,n,o){this.gl=t,this.type=o,this.uniformLocation=t.getUniformLocation(e,n)}setData(...t){switch(this.type){case"uniform1f":this.gl.uniform1f(this.uniformLocation,t[0]);break;case"uniform2f":this.gl.uniform2f(this.uniformLocation,t[0],t[1]);break;case"uniform4f":this.gl.uniform4f(this.uniformLocation,t[0],t[1],t[2],t[3]);break;case"uniform2fv":this.gl.uniform2fv(this.uniformLocation,t[0]);break;case"uniform3fv":this.gl.uniform3fv(this.uniformLocation,t[0]);break;case"uniform4fv":this.gl.uniform4fv(this.uniformLocation,t[0]);break;case"uniformMatrix3fv":this.gl.uniformMatrix3fv(this.uniformLocation,!1,t[0]);break;case"uniformMatrix4fv":this.gl.uniformMatrix4fv(this.uniformLocation,!1,t[0]);break;default:throw new Error(`UniformClass: function ${this.type} has not been implemented.`)}}}function n(t,e,n){const o=t.createShader(e);t.shaderSource(o,n),t.compileShader(o);if(t.getShaderParameter(o,t.COMPILE_STATUS))return o;{const e=t.getShaderInfoLog(o);throw t.deleteShader(o),new Error("createShader: "+e)}}try{const r=function(t,e="webgl2",n){const o=document.getElementById(t);if(!o)throw new Error(`createGLContext: Could not locate canvas element with id ${t}`);return{gl:o.getContext(e,n),canvas:o}}("my_canvas"),i=r.gl;!function(t){const e=t.clientWidth,n=t.clientHeight,o=t.width!==e||t.height!==n;o&&(t.width=e,t.height=n)}(r.canvas),i.viewport(0,0,i.canvas.width,i.canvas.height);const a=n(i,i.VERTEX_SHADER,"#version 300 es\n\n// Receive position data from the buffer\nin vec2 a_position_v2;\n\n// Used to pass in the resolution of the canvas\nuniform vec2 u_resolution_v2;\n\nvoid main() {\n  // Convert the position from pixels to 0.0 to 1.0\n  vec2 zeroToOne_v2 = a_position_v2 / u_resolution_v2;\n\n  // convert from 0->1 to 0->2\n  vec2 zeroToTwo_v2 = zeroToOne_v2 * 2.0;\n\n  // convert from 0->2 to -1 -> +1 (clip space)\n  vec2 clipSpace_v2 = zeroToTwo_v2 - 1.0;\n\n  // assign position\n  //gl_Position = vec4(clipSpace_v2, 0, 1);\n\n  // move position to upper left corner and assign position\n  gl_Position = vec4(clipSpace_v2 * vec2(1, -1), 0, 1);\n}"),s=n(i,i.FRAGMENT_SHADER,'#version 300 es\n\n// Fragment shaders don\'t have a default precision so we need\n//   to pick one. highp is a good default. It means "high precision"\n\nprecision highp float;\n\n// We need to declare an output for the fragment shader\nout vec4 outColor_v4;\n\nvoid main() {\n  // outColor variable is responsible for setting (red, green, blue)\n  outColor_v4 = vec4(1, 0, 0.5, 1); // return reddish-purple\n}'),c=function(t,e,n){const o=t.createProgram();if(t.attachShader(o,e),t.attachShader(o,n),t.linkProgram(o),t.getProgramParameter(o,t.LINK_STATUS))return o;{const e=t.getProgramInfoLog(o);throw t.deleteProgram(o),new Error("createProgram: "+e)}}(i,a,s);i.useProgram(c);const h=[0,300,300,0,0,0],f=[0,600,600,0,0,0],l=[150,450,450,150,150,150];let u=h;const g=i.FLOAT,m=new t(i,g,c,"a_position_v2");m.setData(u,i.STATIC_DRAW);const v=i.createVertexArray();i.bindVertexArray(v);{const t=2,e=!1,n=0,o=0;m.bufferFormat(t,e,n,o)}function o(){!function(t,e=[0,0,0,1]){t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.clearColor(e[0],e[1],e[2],e[3]),t.clearDepth(1),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)}(i),m.setData(u,i.STATIC_DRAW);const t=i.TRIANGLES;i.drawArrays(t,0,3)}new e(i,c,"u_resolution_v2","uniform2f").setData(i.canvas.width,i.canvas.height);document.getElementById("corner").addEventListener("click",(()=>{u=h,o()}));document.getElementById("bigger").addEventListener("click",(()=>{u=f,o()}));document.getElementById("center").addEventListener("click",(()=>{u=l,o()})),o()}catch(t){console.log(t.message)}
//# sourceMappingURL=index.fdab3522.js.map
